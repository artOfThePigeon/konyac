import { AxiosResponse } from "axios";
import { BackoffOptions } from 'exponential-backoff';
import { FlowUpdateQuery } from '../model/flowUpdateQuery';
import { GetFlowActionFlowMessageRelationshipResponseCollection } from '../model/getFlowActionFlowMessageRelationshipResponseCollection';
import { GetFlowActionFlowRelationshipResponse } from '../model/getFlowActionFlowRelationshipResponse';
import { GetFlowActionResponse } from '../model/getFlowActionResponse';
import { GetFlowActionResponseCollection } from '../model/getFlowActionResponseCollection';
import { GetFlowActionResponseCompoundDocument } from '../model/getFlowActionResponseCompoundDocument';
import { GetFlowFlowActionRelationshipListResponseCollection } from '../model/getFlowFlowActionRelationshipListResponseCollection';
import { GetFlowMessageFlowActionRelationshipResponse } from '../model/getFlowMessageFlowActionRelationshipResponse';
import { GetFlowMessageResponseCollection } from '../model/getFlowMessageResponseCollection';
import { GetFlowMessageResponseCompoundDocument } from '../model/getFlowMessageResponseCompoundDocument';
import { GetFlowMessageTemplateRelationshipResponse } from '../model/getFlowMessageTemplateRelationshipResponse';
import { GetFlowResponse } from '../model/getFlowResponse';
import { GetFlowResponseCollectionCompoundDocument } from '../model/getFlowResponseCollectionCompoundDocument';
import { GetFlowResponseCompoundDocument } from '../model/getFlowResponseCompoundDocument';
import { GetFlowTagRelationshipListResponseCollection } from '../model/getFlowTagRelationshipListResponseCollection';
import { GetTagResponseCollection } from '../model/getTagResponseCollection';
import { GetTemplateResponse } from '../model/getTemplateResponse';
import { PatchFlowResponse } from '../model/patchFlowResponse';
import { Session } from './apis';
export declare class FlowsApi {
    protected backoffOptions: BackoffOptions;
    session: Session;
    protected _basePath: string;
    protected _defaultHeaders: any;
    protected _useQuerystring: boolean;
    constructor(session: Session);
    set useQuerystring(value: boolean);
    set basePath(basePath: string);
    set defaultHeaders(defaultHeaders: any);
    get defaultHeaders(): any;
    get basePath(): string;
    getFlow(id: string, options?: {
        fieldsFlowAction?: Array<'action_type' | 'status' | 'created' | 'updated' | 'settings' | 'tracking_options' | 'send_options' | 'send_options.use_smart_sending' | 'send_options.is_transactional' | 'render_options' | 'render_options.shorten_links' | 'render_options.add_org_prefix' | 'render_options.add_info_link' | 'render_options.add_opt_out_language'>;
        fieldsFlow?: Array<'name' | 'status' | 'archived' | 'created' | 'updated' | 'trigger_type'>;
        fieldsTag?: Array<'name'>;
        include?: Array<'flow-actions' | 'tags'>;
    }): Promise<{
        response: AxiosResponse;
        body: GetFlowResponseCompoundDocument;
    }>;
    getFlowAction(id: string, options?: {
        fieldsFlowAction?: Array<'action_type' | 'status' | 'created' | 'updated' | 'settings' | 'tracking_options' | 'send_options' | 'send_options.use_smart_sending' | 'send_options.is_transactional' | 'render_options' | 'render_options.shorten_links' | 'render_options.add_org_prefix' | 'render_options.add_info_link' | 'render_options.add_opt_out_language'>;
        fieldsFlowMessage?: Array<'name' | 'channel' | 'content' | 'created' | 'updated'>;
        fieldsFlow?: Array<'name' | 'status' | 'archived' | 'created' | 'updated' | 'trigger_type'>;
        include?: Array<'flow' | 'flow-messages'>;
    }): Promise<{
        response: AxiosResponse;
        body: GetFlowActionResponseCompoundDocument;
    }>;
    getFlowActionFlow(id: string, options?: {
        fieldsFlow?: Array<'name' | 'status' | 'archived' | 'created' | 'updated' | 'trigger_type'>;
    }): Promise<{
        response: AxiosResponse;
        body: GetFlowResponse;
    }>;
    getFlowActionMessages(id: string, options?: {
        fieldsFlowMessage?: Array<'name' | 'channel' | 'content' | 'created' | 'updated'>;
        filter?: string;
        pageSize?: number;
        sort?: 'created' | '-created' | 'id' | '-id' | 'name' | '-name' | 'updated' | '-updated';
    }): Promise<{
        response: AxiosResponse;
        body: GetFlowMessageResponseCollection;
    }>;
    getFlowActionRelationshipsFlow(id: string): Promise<{
        response: AxiosResponse;
        body: GetFlowActionFlowRelationshipResponse;
    }>;
    getFlowActionRelationshipsMessages(id: string, options?: {
        filter?: string;
        pageCursor?: string;
        pageSize?: number;
        sort?: 'created' | '-created' | 'id' | '-id' | 'name' | '-name' | 'updated' | '-updated';
    }): Promise<{
        response: AxiosResponse;
        body: GetFlowActionFlowMessageRelationshipResponseCollection;
    }>;
    getFlowFlowActions(id: string, options?: {
        fieldsFlowAction?: Array<'action_type' | 'status' | 'created' | 'updated' | 'settings' | 'tracking_options' | 'send_options' | 'send_options.use_smart_sending' | 'send_options.is_transactional' | 'render_options' | 'render_options.shorten_links' | 'render_options.add_org_prefix' | 'render_options.add_info_link' | 'render_options.add_opt_out_language'>;
        filter?: string;
        pageCursor?: string;
        pageSize?: number;
        sort?: 'action_type' | '-action_type' | 'created' | '-created' | 'id' | '-id' | 'status' | '-status' | 'updated' | '-updated';
    }): Promise<{
        response: AxiosResponse;
        body: GetFlowActionResponseCollection;
    }>;
    getFlowMessage(id: string, options?: {
        fieldsFlowAction?: Array<'action_type' | 'status' | 'created' | 'updated' | 'settings' | 'tracking_options' | 'send_options' | 'send_options.use_smart_sending' | 'send_options.is_transactional' | 'render_options' | 'render_options.shorten_links' | 'render_options.add_org_prefix' | 'render_options.add_info_link' | 'render_options.add_opt_out_language'>;
        fieldsFlowMessage?: Array<'name' | 'channel' | 'content' | 'created' | 'updated'>;
        fieldsTemplate?: Array<'name' | 'editor_type' | 'html' | 'text' | 'created' | 'updated'>;
        include?: Array<'flow-action' | 'template'>;
    }): Promise<{
        response: AxiosResponse;
        body: GetFlowMessageResponseCompoundDocument;
    }>;
    getFlowMessageAction(id: string, options?: {
        fieldsFlowAction?: Array<'action_type' | 'status' | 'created' | 'updated' | 'settings' | 'tracking_options' | 'send_options' | 'send_options.use_smart_sending' | 'send_options.is_transactional' | 'render_options' | 'render_options.shorten_links' | 'render_options.add_org_prefix' | 'render_options.add_info_link' | 'render_options.add_opt_out_language'>;
    }): Promise<{
        response: AxiosResponse;
        body: GetFlowActionResponse;
    }>;
    getFlowMessageRelationshipsAction(id: string): Promise<{
        response: AxiosResponse;
        body: GetFlowMessageFlowActionRelationshipResponse;
    }>;
    getFlowMessageRelationshipsTemplate(id: string): Promise<{
        response: AxiosResponse;
        body: GetFlowMessageTemplateRelationshipResponse;
    }>;
    getFlowMessageTemplate(id: string, options?: {
        fieldsTemplate?: Array<'name' | 'editor_type' | 'html' | 'text' | 'created' | 'updated'>;
    }): Promise<{
        response: AxiosResponse;
        body: GetTemplateResponse;
    }>;
    getFlowRelationshipsFlowActions(id: string, options?: {
        filter?: string;
        pageSize?: number;
        sort?: 'created' | '-created' | 'id' | '-id' | 'status' | '-status' | 'updated' | '-updated';
    }): Promise<{
        response: AxiosResponse;
        body: GetFlowFlowActionRelationshipListResponseCollection;
    }>;
    getFlowRelationshipsTags(id: string): Promise<{
        response: AxiosResponse;
        body: GetFlowTagRelationshipListResponseCollection;
    }>;
    getFlowTags(id: string, options?: {
        fieldsTag?: Array<'name'>;
    }): Promise<{
        response: AxiosResponse;
        body: GetTagResponseCollection;
    }>;
    getFlows(options?: {
        fieldsFlowAction?: Array<'action_type' | 'status' | 'created' | 'updated' | 'settings' | 'tracking_options' | 'send_options' | 'send_options.use_smart_sending' | 'send_options.is_transactional' | 'render_options' | 'render_options.shorten_links' | 'render_options.add_org_prefix' | 'render_options.add_info_link' | 'render_options.add_opt_out_language'>;
        fieldsFlow?: Array<'name' | 'status' | 'archived' | 'created' | 'updated' | 'trigger_type'>;
        fieldsTag?: Array<'name'>;
        filter?: string;
        include?: Array<'flow-actions' | 'tags'>;
        pageCursor?: string;
        pageSize?: number;
        sort?: 'created' | '-created' | 'id' | '-id' | 'name' | '-name' | 'status' | '-status' | 'trigger_type' | '-trigger_type' | 'updated' | '-updated';
    }): Promise<{
        response: AxiosResponse;
        body: GetFlowResponseCollectionCompoundDocument;
    }>;
    updateFlow(id: string, flowUpdateQuery: FlowUpdateQuery): Promise<{
        response: AxiosResponse;
        body: PatchFlowResponse;
    }>;
}
