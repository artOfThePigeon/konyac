import { BackoffOptions } from "exponential-backoff";
export * from './accountsApi';
import { AccountsApi } from './accountsApi';
export * from './campaignsApi';
import { CampaignsApi } from './campaignsApi';
export * from './catalogsApi';
import { CatalogsApi } from './catalogsApi';
export * from './couponsApi';
import { CouponsApi } from './couponsApi';
export * from './dataPrivacyApi';
import { DataPrivacyApi } from './dataPrivacyApi';
export * from './eventsApi';
import { EventsApi } from './eventsApi';
export * from './flowsApi';
import { FlowsApi } from './flowsApi';
export * from './imagesApi';
import { ImagesApi } from './imagesApi';
export * from './listsApi';
import { ListsApi } from './listsApi';
export * from './metricsApi';
import { MetricsApi } from './metricsApi';
export * from './profilesApi';
import { ProfilesApi } from './profilesApi';
export * from './segmentsApi';
import { SegmentsApi } from './segmentsApi';
export * from './tagsApi';
import { TagsApi } from './tagsApi';
export * from './templatesApi';
import { TemplatesApi } from './templatesApi';
import { AxiosRequestConfig } from "axios/index";
export { RequestFile } from '../model/models';
export declare enum KlaviyoApiKey {
    KeyName = "Klaviyo-API-Key"
}
export declare class RetryOptions {
    options: BackoffOptions;
    constructor(options?: {
        numOfAttempts?: number;
        timeMultiple?: number;
        startingDelay?: number;
    });
    get backOffOptions(): BackoffOptions;
    set backOffOptions(backoffOptions: BackoffOptions);
}
export declare function queryParamPreProcessor(queryParams: any): void;
export declare class GlobalApiKeySettings {
    static apiKey: string;
    static retryOptions: RetryOptions;
    constructor(apiKey: string, retryOptions?: RetryOptions);
}
export interface Session {
    applyToRequest(requestOptions: AxiosRequestConfig): Promise<void> | void;
    getRetryOptions(): BackoffOptions;
}
export declare class ApiKeySession implements Session {
    retryOptions: RetryOptions;
    apiKey: string;
    protected _apiKeyPrefix: string;
    constructor(apiKey: string, retryOptions?: RetryOptions);
    applyToRequest(requestOptions: AxiosRequestConfig): void;
    getRetryOptions(): BackoffOptions;
}
export declare class GlobalApiKeySession implements Session {
    protected _apiKeyPrefix: string;
    applyToRequest(requestOptions: AxiosRequestConfig): void;
    getRetryOptions(): BackoffOptions;
}
export declare function ConfigWrapper(apiKey: string, opts?: {
    numOfAttempts?: number;
    timeMultiple?: number;
    startingDelay?: number;
}): ApiKeySession;
export declare const Accounts: AccountsApi;
export declare const Campaigns: CampaignsApi;
export declare const Catalogs: CatalogsApi;
export declare const Coupons: CouponsApi;
export declare const DataPrivacy: DataPrivacyApi;
export declare const Events: EventsApi;
export declare const Flows: FlowsApi;
export declare const Images: ImagesApi;
export declare const Lists: ListsApi;
export declare const Metrics: MetricsApi;
export declare const Profiles: ProfilesApi;
export declare const Segments: SegmentsApi;
export declare const Tags: TagsApi;
export declare const Templates: TemplatesApi;
export declare const Auth: {
    ApiKeySession: typeof ApiKeySession;
    GlobalApiKeySession: typeof GlobalApiKeySession;
    GlobalApiKeySettings: typeof GlobalApiKeySettings;
};
export declare const Klaviyo: {
    Auth: {
        ApiKeySession: typeof ApiKeySession;
        GlobalApiKeySession: typeof GlobalApiKeySession;
        GlobalApiKeySettings: typeof GlobalApiKeySettings;
    };
    AccountsApi: typeof AccountsApi;
    Accounts: AccountsApi;
    CampaignsApi: typeof CampaignsApi;
    Campaigns: CampaignsApi;
    CatalogsApi: typeof CatalogsApi;
    Catalogs: CatalogsApi;
    CouponsApi: typeof CouponsApi;
    Coupons: CouponsApi;
    DataPrivacyApi: typeof DataPrivacyApi;
    DataPrivacy: DataPrivacyApi;
    EventsApi: typeof EventsApi;
    Events: EventsApi;
    FlowsApi: typeof FlowsApi;
    Flows: FlowsApi;
    ImagesApi: typeof ImagesApi;
    Images: ImagesApi;
    ListsApi: typeof ListsApi;
    Lists: ListsApi;
    MetricsApi: typeof MetricsApi;
    Metrics: MetricsApi;
    ProfilesApi: typeof ProfilesApi;
    Profiles: ProfilesApi;
    SegmentsApi: typeof SegmentsApi;
    Segments: SegmentsApi;
    TagsApi: typeof TagsApi;
    Tags: TagsApi;
    TemplatesApi: typeof TemplatesApi;
    Templates: TemplatesApi;
};
