import { AxiosResponse } from "axios";
import { BackoffOptions } from 'exponential-backoff';
import { GetListResponseCollection } from '../model/getListResponseCollection';
import { GetProfileListRelationshipsResponseCollection } from '../model/getProfileListRelationshipsResponseCollection';
import { GetProfileResponseCollectionCompoundDocument } from '../model/getProfileResponseCollectionCompoundDocument';
import { GetProfileResponseCompoundDocument } from '../model/getProfileResponseCompoundDocument';
import { GetProfileSegmentRelationshipsResponseCollection } from '../model/getProfileSegmentRelationshipsResponseCollection';
import { GetSegmentResponseCollection } from '../model/getSegmentResponseCollection';
import { PatchProfileResponse } from '../model/patchProfileResponse';
import { PostProfileMergeResponse } from '../model/postProfileMergeResponse';
import { PostProfileResponse } from '../model/postProfileResponse';
import { ProfileCreateQuery } from '../model/profileCreateQuery';
import { ProfileMergeQuery } from '../model/profileMergeQuery';
import { ProfilePartialUpdateQuery } from '../model/profilePartialUpdateQuery';
import { PushTokenCreateQuery } from '../model/pushTokenCreateQuery';
import { SubscriptionCreateJobCreateQuery } from '../model/subscriptionCreateJobCreateQuery';
import { SubscriptionDeleteJobCreateQuery } from '../model/subscriptionDeleteJobCreateQuery';
import { SuppressionCreateJobCreateQuery } from '../model/suppressionCreateJobCreateQuery';
import { SuppressionDeleteJobCreateQuery } from '../model/suppressionDeleteJobCreateQuery';
import { Session } from './apis';
export declare class ProfilesApi {
    protected backoffOptions: BackoffOptions;
    session: Session;
    protected _basePath: string;
    protected _defaultHeaders: any;
    protected _useQuerystring: boolean;
    constructor(session: Session);
    set useQuerystring(value: boolean);
    set basePath(basePath: string);
    set defaultHeaders(defaultHeaders: any);
    get defaultHeaders(): any;
    get basePath(): string;
    createProfile(profileCreateQuery: ProfileCreateQuery): Promise<{
        response: AxiosResponse;
        body: PostProfileResponse;
    }>;
    createPushToken(pushTokenCreateQuery: PushTokenCreateQuery): Promise<{
        response: AxiosResponse;
        body?: any;
    }>;
    getProfile(id: string, options?: {
        additionalFieldsProfile?: Array<'predictive_analytics'>;
        fieldsList?: Array<'name' | 'created' | 'updated'>;
        fieldsProfile?: Array<'email' | 'phone_number' | 'external_id' | 'first_name' | 'last_name' | 'organization' | 'title' | 'image' | 'created' | 'updated' | 'last_event_date' | 'location' | 'location.address1' | 'location.address2' | 'location.city' | 'location.country' | 'location.latitude' | 'location.longitude' | 'location.region' | 'location.zip' | 'location.timezone' | 'properties' | 'subscriptions' | 'subscriptions.email' | 'subscriptions.email.marketing' | 'subscriptions.email.marketing.consent' | 'subscriptions.email.marketing.timestamp' | 'subscriptions.email.marketing.method' | 'subscriptions.email.marketing.method_detail' | 'subscriptions.email.marketing.custom_method_detail' | 'subscriptions.email.marketing.double_optin' | 'subscriptions.email.marketing.suppressions' | 'subscriptions.email.marketing.list_suppressions' | 'subscriptions.sms' | 'subscriptions.sms.marketing' | 'subscriptions.sms.marketing.consent' | 'subscriptions.sms.marketing.timestamp' | 'subscriptions.sms.marketing.method' | 'subscriptions.sms.marketing.method_detail' | 'predictive_analytics' | 'predictive_analytics.historic_clv' | 'predictive_analytics.predicted_clv' | 'predictive_analytics.total_clv' | 'predictive_analytics.historic_number_of_orders' | 'predictive_analytics.predicted_number_of_orders' | 'predictive_analytics.average_days_between_orders' | 'predictive_analytics.average_order_value' | 'predictive_analytics.churn_probability' | 'predictive_analytics.expected_date_of_next_order'>;
        fieldsSegment?: Array<'name' | 'created' | 'updated'>;
        include?: Array<'lists' | 'segments'>;
    }): Promise<{
        response: AxiosResponse;
        body: GetProfileResponseCompoundDocument;
    }>;
    getProfileLists(id: string, options?: {
        fieldsList?: Array<'name' | 'created' | 'updated'>;
    }): Promise<{
        response: AxiosResponse;
        body: GetListResponseCollection;
    }>;
    getProfileRelationshipsLists(id: string): Promise<{
        response: AxiosResponse;
        body: GetProfileListRelationshipsResponseCollection;
    }>;
    getProfileRelationshipsSegments(id: string): Promise<{
        response: AxiosResponse;
        body: GetProfileSegmentRelationshipsResponseCollection;
    }>;
    getProfileSegments(id: string, options?: {
        fieldsSegment?: Array<'name' | 'created' | 'updated'>;
    }): Promise<{
        response: AxiosResponse;
        body: GetSegmentResponseCollection;
    }>;
    getProfiles(options?: {
        additionalFieldsProfile?: Array<'predictive_analytics'>;
        fieldsProfile?: Array<'email' | 'phone_number' | 'external_id' | 'first_name' | 'last_name' | 'organization' | 'title' | 'image' | 'created' | 'updated' | 'last_event_date' | 'location' | 'location.address1' | 'location.address2' | 'location.city' | 'location.country' | 'location.latitude' | 'location.longitude' | 'location.region' | 'location.zip' | 'location.timezone' | 'properties' | 'subscriptions' | 'subscriptions.email' | 'subscriptions.email.marketing' | 'subscriptions.email.marketing.consent' | 'subscriptions.email.marketing.timestamp' | 'subscriptions.email.marketing.method' | 'subscriptions.email.marketing.method_detail' | 'subscriptions.email.marketing.custom_method_detail' | 'subscriptions.email.marketing.double_optin' | 'subscriptions.email.marketing.suppressions' | 'subscriptions.email.marketing.list_suppressions' | 'subscriptions.sms' | 'subscriptions.sms.marketing' | 'subscriptions.sms.marketing.consent' | 'subscriptions.sms.marketing.timestamp' | 'subscriptions.sms.marketing.method' | 'subscriptions.sms.marketing.method_detail' | 'predictive_analytics' | 'predictive_analytics.historic_clv' | 'predictive_analytics.predicted_clv' | 'predictive_analytics.total_clv' | 'predictive_analytics.historic_number_of_orders' | 'predictive_analytics.predicted_number_of_orders' | 'predictive_analytics.average_days_between_orders' | 'predictive_analytics.average_order_value' | 'predictive_analytics.churn_probability' | 'predictive_analytics.expected_date_of_next_order'>;
        filter?: string;
        pageCursor?: string;
        pageSize?: number;
        sort?: 'created' | '-created' | 'email' | '-email' | 'id' | '-id' | 'updated' | '-updated';
    }): Promise<{
        response: AxiosResponse;
        body: GetProfileResponseCollectionCompoundDocument;
    }>;
    mergeProfiles(profileMergeQuery: ProfileMergeQuery): Promise<{
        response: AxiosResponse;
        body: PostProfileMergeResponse;
    }>;
    subscribeProfiles(subscriptionCreateJobCreateQuery: SubscriptionCreateJobCreateQuery): Promise<{
        response: AxiosResponse;
        body?: any;
    }>;
    suppressProfiles(suppressionCreateJobCreateQuery: SuppressionCreateJobCreateQuery): Promise<{
        response: AxiosResponse;
        body?: any;
    }>;
    unsubscribeProfiles(subscriptionDeleteJobCreateQuery: SubscriptionDeleteJobCreateQuery): Promise<{
        response: AxiosResponse;
        body?: any;
    }>;
    unsuppressProfiles(suppressionDeleteJobCreateQuery: SuppressionDeleteJobCreateQuery): Promise<{
        response: AxiosResponse;
        body?: any;
    }>;
    updateProfile(id: string, profilePartialUpdateQuery: ProfilePartialUpdateQuery): Promise<{
        response: AxiosResponse;
        body: PatchProfileResponse;
    }>;
}
