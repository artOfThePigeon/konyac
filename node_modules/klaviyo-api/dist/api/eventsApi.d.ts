import { AxiosResponse } from "axios";
import { BackoffOptions } from 'exponential-backoff';
import { EventCreateQueryV2 } from '../model/eventCreateQueryV2';
import { GetEventMetricsRelationshipListResponse } from '../model/getEventMetricsRelationshipListResponse';
import { GetEventProfilesRelationshipListResponse } from '../model/getEventProfilesRelationshipListResponse';
import { GetEventResponseCollectionCompoundDocument } from '../model/getEventResponseCollectionCompoundDocument';
import { GetEventResponseCompoundDocument } from '../model/getEventResponseCompoundDocument';
import { GetMetricResponse } from '../model/getMetricResponse';
import { GetProfileResponse } from '../model/getProfileResponse';
import { Session } from './apis';
export declare class EventsApi {
    protected backoffOptions: BackoffOptions;
    session: Session;
    protected _basePath: string;
    protected _defaultHeaders: any;
    protected _useQuerystring: boolean;
    constructor(session: Session);
    set useQuerystring(value: boolean);
    set basePath(basePath: string);
    set defaultHeaders(defaultHeaders: any);
    get defaultHeaders(): any;
    get basePath(): string;
    createEvent(eventCreateQueryV2: EventCreateQueryV2): Promise<{
        response: AxiosResponse;
        body?: any;
    }>;
    getEvent(id: string, options?: {
        fieldsEvent?: Array<'timestamp' | 'event_properties' | 'datetime' | 'uuid'>;
        fieldsMetric?: Array<'name' | 'created' | 'updated' | 'integration'>;
        fieldsProfile?: Array<'email' | 'phone_number' | 'external_id' | 'first_name' | 'last_name' | 'organization' | 'title' | 'image' | 'created' | 'updated' | 'last_event_date' | 'location' | 'location.address1' | 'location.address2' | 'location.city' | 'location.country' | 'location.latitude' | 'location.longitude' | 'location.region' | 'location.zip' | 'location.timezone' | 'properties' | 'subscriptions' | 'subscriptions.email' | 'subscriptions.email.marketing' | 'subscriptions.email.marketing.consent' | 'subscriptions.email.marketing.timestamp' | 'subscriptions.email.marketing.method' | 'subscriptions.email.marketing.method_detail' | 'subscriptions.email.marketing.custom_method_detail' | 'subscriptions.email.marketing.double_optin' | 'subscriptions.email.marketing.suppressions' | 'subscriptions.email.marketing.list_suppressions' | 'subscriptions.sms' | 'subscriptions.sms.marketing' | 'subscriptions.sms.marketing.consent' | 'subscriptions.sms.marketing.timestamp' | 'subscriptions.sms.marketing.method' | 'subscriptions.sms.marketing.method_detail'>;
        include?: Array<'metric' | 'profile'>;
    }): Promise<{
        response: AxiosResponse;
        body: GetEventResponseCompoundDocument;
    }>;
    getEventMetric(id: string, options?: {
        fieldsMetric?: Array<'name' | 'created' | 'updated' | 'integration'>;
    }): Promise<{
        response: AxiosResponse;
        body: GetMetricResponse;
    }>;
    getEventProfile(id: string, options?: {
        additionalFieldsProfile?: Array<'predictive_analytics'>;
        fieldsProfile?: Array<'email' | 'phone_number' | 'external_id' | 'first_name' | 'last_name' | 'organization' | 'title' | 'image' | 'created' | 'updated' | 'last_event_date' | 'location' | 'location.address1' | 'location.address2' | 'location.city' | 'location.country' | 'location.latitude' | 'location.longitude' | 'location.region' | 'location.zip' | 'location.timezone' | 'properties' | 'subscriptions' | 'subscriptions.email' | 'subscriptions.email.marketing' | 'subscriptions.email.marketing.consent' | 'subscriptions.email.marketing.timestamp' | 'subscriptions.email.marketing.method' | 'subscriptions.email.marketing.method_detail' | 'subscriptions.email.marketing.custom_method_detail' | 'subscriptions.email.marketing.double_optin' | 'subscriptions.email.marketing.suppressions' | 'subscriptions.email.marketing.list_suppressions' | 'subscriptions.sms' | 'subscriptions.sms.marketing' | 'subscriptions.sms.marketing.consent' | 'subscriptions.sms.marketing.timestamp' | 'subscriptions.sms.marketing.method' | 'subscriptions.sms.marketing.method_detail' | 'predictive_analytics' | 'predictive_analytics.historic_clv' | 'predictive_analytics.predicted_clv' | 'predictive_analytics.total_clv' | 'predictive_analytics.historic_number_of_orders' | 'predictive_analytics.predicted_number_of_orders' | 'predictive_analytics.average_days_between_orders' | 'predictive_analytics.average_order_value' | 'predictive_analytics.churn_probability' | 'predictive_analytics.expected_date_of_next_order'>;
    }): Promise<{
        response: AxiosResponse;
        body: GetProfileResponse;
    }>;
    getEventRelationshipsMetric(id: string): Promise<{
        response: AxiosResponse;
        body: GetEventMetricsRelationshipListResponse;
    }>;
    getEventRelationshipsProfile(id: string): Promise<{
        response: AxiosResponse;
        body: GetEventProfilesRelationshipListResponse;
    }>;
    getEvents(options?: {
        fieldsEvent?: Array<'timestamp' | 'event_properties' | 'datetime' | 'uuid'>;
        fieldsMetric?: Array<'name' | 'created' | 'updated' | 'integration'>;
        fieldsProfile?: Array<'email' | 'phone_number' | 'external_id' | 'first_name' | 'last_name' | 'organization' | 'title' | 'image' | 'created' | 'updated' | 'last_event_date' | 'location' | 'location.address1' | 'location.address2' | 'location.city' | 'location.country' | 'location.latitude' | 'location.longitude' | 'location.region' | 'location.zip' | 'location.timezone' | 'properties' | 'subscriptions' | 'subscriptions.email' | 'subscriptions.email.marketing' | 'subscriptions.email.marketing.consent' | 'subscriptions.email.marketing.timestamp' | 'subscriptions.email.marketing.method' | 'subscriptions.email.marketing.method_detail' | 'subscriptions.email.marketing.custom_method_detail' | 'subscriptions.email.marketing.double_optin' | 'subscriptions.email.marketing.suppressions' | 'subscriptions.email.marketing.list_suppressions' | 'subscriptions.sms' | 'subscriptions.sms.marketing' | 'subscriptions.sms.marketing.consent' | 'subscriptions.sms.marketing.timestamp' | 'subscriptions.sms.marketing.method' | 'subscriptions.sms.marketing.method_detail'>;
        filter?: string;
        include?: Array<'metric' | 'profile'>;
        pageCursor?: string;
        sort?: 'datetime' | '-datetime' | 'timestamp' | '-timestamp';
    }): Promise<{
        response: AxiosResponse;
        body: GetEventResponseCollectionCompoundDocument;
    }>;
}
