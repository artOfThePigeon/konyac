"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.CampaignsApi = void 0;
const axios = require('axios');
const exponential_backoff_1 = require("exponential-backoff");
const models_1 = require("../model/models");
const apis_1 = require("./apis");
let defaultBasePath = 'https://a.klaviyo.com';
class CampaignsApi {
    constructor(session) {
        this.backoffOptions = new apis_1.RetryOptions().options;
        this._basePath = defaultBasePath;
        this._defaultHeaders = {
            revision: "2023-09-15",
            "User-Agent": "klaviyo-api-node/6.0.1"
        };
        this._useQuerystring = false;
        this.session = session;
    }
    set useQuerystring(value) {
        this._useQuerystring = value;
    }
    set basePath(basePath) {
        this._basePath = basePath;
    }
    set defaultHeaders(defaultHeaders) {
        this._defaultHeaders = defaultHeaders;
    }
    get defaultHeaders() {
        return this._defaultHeaders;
    }
    get basePath() {
        return this._basePath;
    }
    createCampaign(campaignCreateQuery) {
        return __awaiter(this, void 0, void 0, function* () {
            const localVarPath = this.basePath + '/api/campaigns/';
            let localVarQueryParameters = {};
            let localVarHeaderParams = Object.assign({}, this._defaultHeaders);
            const produces = ['application/json'];
            if (produces.indexOf('application/json') >= 0) {
                localVarHeaderParams.Accept = 'application/json';
            }
            else {
                localVarHeaderParams.Accept = produces.join(',');
            }
            if (campaignCreateQuery === null || campaignCreateQuery === undefined) {
                throw new Error('Required parameter campaignCreateQuery was null or undefined when calling createCampaign.');
            }
            (0, apis_1.queryParamPreProcessor)(localVarQueryParameters);
            let config = {
                method: 'POST',
                url: localVarPath,
                headers: localVarHeaderParams,
                params: localVarQueryParameters,
                data: models_1.ObjectSerializer.serialize(campaignCreateQuery, "CampaignCreateQuery")
            };
            this.session.applyToRequest(config);
            return (0, exponential_backoff_1.backOff)(() => {
                return new Promise((resolve, reject) => {
                    axios(config)
                        .then(axiosResponse => {
                        let body;
                        body = models_1.ObjectSerializer.deserialize(axiosResponse.data, "PostCampaignResponse");
                        resolve({ response: axiosResponse, body: body });
                    })
                        .catch(error => {
                        reject(error);
                    });
                });
            }, this.session.getRetryOptions());
        });
    }
    createCampaignClone(campaignCloneQuery) {
        return __awaiter(this, void 0, void 0, function* () {
            const localVarPath = this.basePath + '/api/campaign-clone/';
            let localVarQueryParameters = {};
            let localVarHeaderParams = Object.assign({}, this._defaultHeaders);
            const produces = ['application/json'];
            if (produces.indexOf('application/json') >= 0) {
                localVarHeaderParams.Accept = 'application/json';
            }
            else {
                localVarHeaderParams.Accept = produces.join(',');
            }
            if (campaignCloneQuery === null || campaignCloneQuery === undefined) {
                throw new Error('Required parameter campaignCloneQuery was null or undefined when calling createCampaignClone.');
            }
            (0, apis_1.queryParamPreProcessor)(localVarQueryParameters);
            let config = {
                method: 'POST',
                url: localVarPath,
                headers: localVarHeaderParams,
                params: localVarQueryParameters,
                data: models_1.ObjectSerializer.serialize(campaignCloneQuery, "CampaignCloneQuery")
            };
            this.session.applyToRequest(config);
            return (0, exponential_backoff_1.backOff)(() => {
                return new Promise((resolve, reject) => {
                    axios(config)
                        .then(axiosResponse => {
                        let body;
                        body = models_1.ObjectSerializer.deserialize(axiosResponse.data, "PostCampaignResponse");
                        resolve({ response: axiosResponse, body: body });
                    })
                        .catch(error => {
                        reject(error);
                    });
                });
            }, this.session.getRetryOptions());
        });
    }
    createCampaignMessageAssignTemplate(campaignMessageAssignTemplateQuery) {
        return __awaiter(this, void 0, void 0, function* () {
            const localVarPath = this.basePath + '/api/campaign-message-assign-template/';
            let localVarQueryParameters = {};
            let localVarHeaderParams = Object.assign({}, this._defaultHeaders);
            const produces = ['application/json'];
            if (produces.indexOf('application/json') >= 0) {
                localVarHeaderParams.Accept = 'application/json';
            }
            else {
                localVarHeaderParams.Accept = produces.join(',');
            }
            if (campaignMessageAssignTemplateQuery === null || campaignMessageAssignTemplateQuery === undefined) {
                throw new Error('Required parameter campaignMessageAssignTemplateQuery was null or undefined when calling createCampaignMessageAssignTemplate.');
            }
            (0, apis_1.queryParamPreProcessor)(localVarQueryParameters);
            let config = {
                method: 'POST',
                url: localVarPath,
                headers: localVarHeaderParams,
                params: localVarQueryParameters,
                data: models_1.ObjectSerializer.serialize(campaignMessageAssignTemplateQuery, "CampaignMessageAssignTemplateQuery")
            };
            this.session.applyToRequest(config);
            return (0, exponential_backoff_1.backOff)(() => {
                return new Promise((resolve, reject) => {
                    axios(config)
                        .then(axiosResponse => {
                        let body;
                        body = models_1.ObjectSerializer.deserialize(axiosResponse.data, "PostCampaignMessageResponse");
                        resolve({ response: axiosResponse, body: body });
                    })
                        .catch(error => {
                        reject(error);
                    });
                });
            }, this.session.getRetryOptions());
        });
    }
    createCampaignRecipientEstimationJob(campaignRecipientEstimationJobCreateQuery) {
        return __awaiter(this, void 0, void 0, function* () {
            const localVarPath = this.basePath + '/api/campaign-recipient-estimation-jobs/';
            let localVarQueryParameters = {};
            let localVarHeaderParams = Object.assign({}, this._defaultHeaders);
            const produces = ['application/json'];
            if (produces.indexOf('application/json') >= 0) {
                localVarHeaderParams.Accept = 'application/json';
            }
            else {
                localVarHeaderParams.Accept = produces.join(',');
            }
            if (campaignRecipientEstimationJobCreateQuery === null || campaignRecipientEstimationJobCreateQuery === undefined) {
                throw new Error('Required parameter campaignRecipientEstimationJobCreateQuery was null or undefined when calling createCampaignRecipientEstimationJob.');
            }
            (0, apis_1.queryParamPreProcessor)(localVarQueryParameters);
            let config = {
                method: 'POST',
                url: localVarPath,
                headers: localVarHeaderParams,
                params: localVarQueryParameters,
                data: models_1.ObjectSerializer.serialize(campaignRecipientEstimationJobCreateQuery, "CampaignRecipientEstimationJobCreateQuery")
            };
            this.session.applyToRequest(config);
            return (0, exponential_backoff_1.backOff)(() => {
                return new Promise((resolve, reject) => {
                    axios(config)
                        .then(axiosResponse => {
                        let body;
                        body = models_1.ObjectSerializer.deserialize(axiosResponse.data, "PostCampaignRecipientEstimationJobResponse");
                        resolve({ response: axiosResponse, body: body });
                    })
                        .catch(error => {
                        reject(error);
                    });
                });
            }, this.session.getRetryOptions());
        });
    }
    createCampaignSendJob(campaignSendJobCreateQuery) {
        return __awaiter(this, void 0, void 0, function* () {
            const localVarPath = this.basePath + '/api/campaign-send-jobs/';
            let localVarQueryParameters = {};
            let localVarHeaderParams = Object.assign({}, this._defaultHeaders);
            const produces = ['application/json'];
            if (produces.indexOf('application/json') >= 0) {
                localVarHeaderParams.Accept = 'application/json';
            }
            else {
                localVarHeaderParams.Accept = produces.join(',');
            }
            if (campaignSendJobCreateQuery === null || campaignSendJobCreateQuery === undefined) {
                throw new Error('Required parameter campaignSendJobCreateQuery was null or undefined when calling createCampaignSendJob.');
            }
            (0, apis_1.queryParamPreProcessor)(localVarQueryParameters);
            let config = {
                method: 'POST',
                url: localVarPath,
                headers: localVarHeaderParams,
                params: localVarQueryParameters,
                data: models_1.ObjectSerializer.serialize(campaignSendJobCreateQuery, "CampaignSendJobCreateQuery")
            };
            this.session.applyToRequest(config);
            return (0, exponential_backoff_1.backOff)(() => {
                return new Promise((resolve, reject) => {
                    axios(config)
                        .then(axiosResponse => {
                        let body;
                        body = models_1.ObjectSerializer.deserialize(axiosResponse.data, "PostCampaignSendJobResponse");
                        resolve({ response: axiosResponse, body: body });
                    })
                        .catch(error => {
                        reject(error);
                    });
                });
            }, this.session.getRetryOptions());
        });
    }
    deleteCampaign(id) {
        return __awaiter(this, void 0, void 0, function* () {
            const localVarPath = this.basePath + '/api/campaigns/{id}/'
                .replace('{' + 'id' + '}', encodeURIComponent(String(id)));
            let localVarQueryParameters = {};
            let localVarHeaderParams = Object.assign({}, this._defaultHeaders);
            const produces = ['application/json'];
            if (produces.indexOf('application/json') >= 0) {
                localVarHeaderParams.Accept = 'application/json';
            }
            else {
                localVarHeaderParams.Accept = produces.join(',');
            }
            if (id === null || id === undefined) {
                throw new Error('Required parameter id was null or undefined when calling deleteCampaign.');
            }
            (0, apis_1.queryParamPreProcessor)(localVarQueryParameters);
            let config = {
                method: 'DELETE',
                url: localVarPath,
                headers: localVarHeaderParams,
                params: localVarQueryParameters,
            };
            this.session.applyToRequest(config);
            return (0, exponential_backoff_1.backOff)(() => {
                return new Promise((resolve, reject) => {
                    axios(config)
                        .then(axiosResponse => {
                        let body;
                        resolve({ response: axiosResponse, body: body });
                    })
                        .catch(error => {
                        reject(error);
                    });
                });
            }, this.session.getRetryOptions());
        });
    }
    getCampaign(id, options = {}) {
        return __awaiter(this, void 0, void 0, function* () {
            const localVarPath = this.basePath + '/api/campaigns/{id}/'
                .replace('{' + 'id' + '}', encodeURIComponent(String(id)));
            let localVarQueryParameters = {};
            let localVarHeaderParams = Object.assign({}, this._defaultHeaders);
            const produces = ['application/json'];
            if (produces.indexOf('application/json') >= 0) {
                localVarHeaderParams.Accept = 'application/json';
            }
            else {
                localVarHeaderParams.Accept = produces.join(',');
            }
            if (id === null || id === undefined) {
                throw new Error('Required parameter id was null or undefined when calling getCampaign.');
            }
            if (options.fieldsCampaignMessage !== undefined) {
                localVarQueryParameters['fields[campaign-message]'] = models_1.ObjectSerializer.serialize(options.fieldsCampaignMessage, "Array<'label' | 'channel' | 'content' | 'send_times' | 'render_options' | 'render_options.shorten_links' | 'render_options.add_org_prefix' | 'render_options.add_info_link' | 'render_options.add_opt_out_language' | 'created_at' | 'updated_at'>");
            }
            if (options.fieldsCampaign !== undefined) {
                localVarQueryParameters['fields[campaign]'] = models_1.ObjectSerializer.serialize(options.fieldsCampaign, "Array<'name' | 'status' | 'archived' | 'audiences' | 'audiences.included' | 'audiences.excluded' | 'send_options' | 'tracking_options' | 'send_strategy' | 'send_strategy.method' | 'send_strategy.options_static' | 'send_strategy.options_static.datetime' | 'send_strategy.options_static.is_local' | 'send_strategy.options_static.send_past_recipients_immediately' | 'send_strategy.options_throttled' | 'send_strategy.options_throttled.datetime' | 'send_strategy.options_throttled.throttle_percentage' | 'send_strategy.options_sto' | 'send_strategy.options_sto.date' | 'created_at' | 'scheduled_at' | 'updated_at' | 'send_time'>");
            }
            if (options.fieldsTag !== undefined) {
                localVarQueryParameters['fields[tag]'] = models_1.ObjectSerializer.serialize(options.fieldsTag, "Array<'name'>");
            }
            if (options.include !== undefined) {
                localVarQueryParameters['include'] = models_1.ObjectSerializer.serialize(options.include, "Array<'campaign-messages' | 'tags'>");
            }
            (0, apis_1.queryParamPreProcessor)(localVarQueryParameters);
            let config = {
                method: 'GET',
                url: localVarPath,
                headers: localVarHeaderParams,
                params: localVarQueryParameters,
            };
            this.session.applyToRequest(config);
            return (0, exponential_backoff_1.backOff)(() => {
                return new Promise((resolve, reject) => {
                    axios(config)
                        .then(axiosResponse => {
                        let body;
                        body = models_1.ObjectSerializer.deserialize(axiosResponse.data, "GetCampaignResponseCompoundDocument");
                        resolve({ response: axiosResponse, body: body });
                    })
                        .catch(error => {
                        reject(error);
                    });
                });
            }, this.session.getRetryOptions());
        });
    }
    getCampaignCampaignMessages(id, options = {}) {
        return __awaiter(this, void 0, void 0, function* () {
            const localVarPath = this.basePath + '/api/campaigns/{id}/campaign-messages/'
                .replace('{' + 'id' + '}', encodeURIComponent(String(id)));
            let localVarQueryParameters = {};
            let localVarHeaderParams = Object.assign({}, this._defaultHeaders);
            const produces = ['application/json'];
            if (produces.indexOf('application/json') >= 0) {
                localVarHeaderParams.Accept = 'application/json';
            }
            else {
                localVarHeaderParams.Accept = produces.join(',');
            }
            if (id === null || id === undefined) {
                throw new Error('Required parameter id was null or undefined when calling getCampaignCampaignMessages.');
            }
            if (options.fieldsCampaignMessage !== undefined) {
                localVarQueryParameters['fields[campaign-message]'] = models_1.ObjectSerializer.serialize(options.fieldsCampaignMessage, "Array<'label' | 'channel' | 'content' | 'send_times' | 'render_options' | 'render_options.shorten_links' | 'render_options.add_org_prefix' | 'render_options.add_info_link' | 'render_options.add_opt_out_language' | 'created_at' | 'updated_at'>");
            }
            if (options.fieldsCampaign !== undefined) {
                localVarQueryParameters['fields[campaign]'] = models_1.ObjectSerializer.serialize(options.fieldsCampaign, "Array<'name' | 'status' | 'archived' | 'audiences' | 'audiences.included' | 'audiences.excluded' | 'send_options' | 'tracking_options' | 'send_strategy' | 'send_strategy.method' | 'send_strategy.options_static' | 'send_strategy.options_static.datetime' | 'send_strategy.options_static.is_local' | 'send_strategy.options_static.send_past_recipients_immediately' | 'send_strategy.options_throttled' | 'send_strategy.options_throttled.datetime' | 'send_strategy.options_throttled.throttle_percentage' | 'send_strategy.options_sto' | 'send_strategy.options_sto.date' | 'created_at' | 'scheduled_at' | 'updated_at' | 'send_time'>");
            }
            if (options.fieldsTemplate !== undefined) {
                localVarQueryParameters['fields[template]'] = models_1.ObjectSerializer.serialize(options.fieldsTemplate, "Array<'name' | 'editor_type' | 'html' | 'text' | 'created' | 'updated'>");
            }
            if (options.include !== undefined) {
                localVarQueryParameters['include'] = models_1.ObjectSerializer.serialize(options.include, "Array<'campaign' | 'template'>");
            }
            (0, apis_1.queryParamPreProcessor)(localVarQueryParameters);
            let config = {
                method: 'GET',
                url: localVarPath,
                headers: localVarHeaderParams,
                params: localVarQueryParameters,
            };
            this.session.applyToRequest(config);
            return (0, exponential_backoff_1.backOff)(() => {
                return new Promise((resolve, reject) => {
                    axios(config)
                        .then(axiosResponse => {
                        let body;
                        body = models_1.ObjectSerializer.deserialize(axiosResponse.data, "GetCampaignMessageResponseCollectionCompoundDocument");
                        resolve({ response: axiosResponse, body: body });
                    })
                        .catch(error => {
                        reject(error);
                    });
                });
            }, this.session.getRetryOptions());
        });
    }
    getCampaignMessage(id, options = {}) {
        return __awaiter(this, void 0, void 0, function* () {
            const localVarPath = this.basePath + '/api/campaign-messages/{id}/'
                .replace('{' + 'id' + '}', encodeURIComponent(String(id)));
            let localVarQueryParameters = {};
            let localVarHeaderParams = Object.assign({}, this._defaultHeaders);
            const produces = ['application/json'];
            if (produces.indexOf('application/json') >= 0) {
                localVarHeaderParams.Accept = 'application/json';
            }
            else {
                localVarHeaderParams.Accept = produces.join(',');
            }
            if (id === null || id === undefined) {
                throw new Error('Required parameter id was null or undefined when calling getCampaignMessage.');
            }
            if (options.fieldsCampaignMessage !== undefined) {
                localVarQueryParameters['fields[campaign-message]'] = models_1.ObjectSerializer.serialize(options.fieldsCampaignMessage, "Array<'label' | 'channel' | 'content' | 'send_times' | 'render_options' | 'render_options.shorten_links' | 'render_options.add_org_prefix' | 'render_options.add_info_link' | 'render_options.add_opt_out_language' | 'created_at' | 'updated_at'>");
            }
            if (options.fieldsCampaign !== undefined) {
                localVarQueryParameters['fields[campaign]'] = models_1.ObjectSerializer.serialize(options.fieldsCampaign, "Array<'name' | 'status' | 'archived' | 'audiences' | 'audiences.included' | 'audiences.excluded' | 'send_options' | 'tracking_options' | 'send_strategy' | 'send_strategy.method' | 'send_strategy.options_static' | 'send_strategy.options_static.datetime' | 'send_strategy.options_static.is_local' | 'send_strategy.options_static.send_past_recipients_immediately' | 'send_strategy.options_throttled' | 'send_strategy.options_throttled.datetime' | 'send_strategy.options_throttled.throttle_percentage' | 'send_strategy.options_sto' | 'send_strategy.options_sto.date' | 'created_at' | 'scheduled_at' | 'updated_at' | 'send_time'>");
            }
            if (options.fieldsTemplate !== undefined) {
                localVarQueryParameters['fields[template]'] = models_1.ObjectSerializer.serialize(options.fieldsTemplate, "Array<'name' | 'editor_type' | 'html' | 'text' | 'created' | 'updated'>");
            }
            if (options.include !== undefined) {
                localVarQueryParameters['include'] = models_1.ObjectSerializer.serialize(options.include, "Array<'campaign' | 'template'>");
            }
            (0, apis_1.queryParamPreProcessor)(localVarQueryParameters);
            let config = {
                method: 'GET',
                url: localVarPath,
                headers: localVarHeaderParams,
                params: localVarQueryParameters,
            };
            this.session.applyToRequest(config);
            return (0, exponential_backoff_1.backOff)(() => {
                return new Promise((resolve, reject) => {
                    axios(config)
                        .then(axiosResponse => {
                        let body;
                        body = models_1.ObjectSerializer.deserialize(axiosResponse.data, "GetCampaignMessageResponseCompoundDocument");
                        resolve({ response: axiosResponse, body: body });
                    })
                        .catch(error => {
                        reject(error);
                    });
                });
            }, this.session.getRetryOptions());
        });
    }
    getCampaignMessageCampaign(id, options = {}) {
        return __awaiter(this, void 0, void 0, function* () {
            const localVarPath = this.basePath + '/api/campaign-messages/{id}/campaign/'
                .replace('{' + 'id' + '}', encodeURIComponent(String(id)));
            let localVarQueryParameters = {};
            let localVarHeaderParams = Object.assign({}, this._defaultHeaders);
            const produces = ['application/json'];
            if (produces.indexOf('application/json') >= 0) {
                localVarHeaderParams.Accept = 'application/json';
            }
            else {
                localVarHeaderParams.Accept = produces.join(',');
            }
            if (id === null || id === undefined) {
                throw new Error('Required parameter id was null or undefined when calling getCampaignMessageCampaign.');
            }
            if (options.fieldsCampaignMessage !== undefined) {
                localVarQueryParameters['fields[campaign-message]'] = models_1.ObjectSerializer.serialize(options.fieldsCampaignMessage, "Array<'label' | 'channel' | 'content' | 'send_times' | 'render_options' | 'render_options.shorten_links' | 'render_options.add_org_prefix' | 'render_options.add_info_link' | 'render_options.add_opt_out_language' | 'created_at' | 'updated_at'>");
            }
            (0, apis_1.queryParamPreProcessor)(localVarQueryParameters);
            let config = {
                method: 'GET',
                url: localVarPath,
                headers: localVarHeaderParams,
                params: localVarQueryParameters,
            };
            this.session.applyToRequest(config);
            return (0, exponential_backoff_1.backOff)(() => {
                return new Promise((resolve, reject) => {
                    axios(config)
                        .then(axiosResponse => {
                        let body;
                        body = models_1.ObjectSerializer.deserialize(axiosResponse.data, "GetCampaignMessageResponse");
                        resolve({ response: axiosResponse, body: body });
                    })
                        .catch(error => {
                        reject(error);
                    });
                });
            }, this.session.getRetryOptions());
        });
    }
    getCampaignMessageRelationshipsCampaign(id) {
        return __awaiter(this, void 0, void 0, function* () {
            const localVarPath = this.basePath + '/api/campaign-messages/{id}/relationships/campaign/'
                .replace('{' + 'id' + '}', encodeURIComponent(String(id)));
            let localVarQueryParameters = {};
            let localVarHeaderParams = Object.assign({}, this._defaultHeaders);
            const produces = ['application/json'];
            if (produces.indexOf('application/json') >= 0) {
                localVarHeaderParams.Accept = 'application/json';
            }
            else {
                localVarHeaderParams.Accept = produces.join(',');
            }
            if (id === null || id === undefined) {
                throw new Error('Required parameter id was null or undefined when calling getCampaignMessageRelationshipsCampaign.');
            }
            (0, apis_1.queryParamPreProcessor)(localVarQueryParameters);
            let config = {
                method: 'GET',
                url: localVarPath,
                headers: localVarHeaderParams,
                params: localVarQueryParameters,
            };
            this.session.applyToRequest(config);
            return (0, exponential_backoff_1.backOff)(() => {
                return new Promise((resolve, reject) => {
                    axios(config)
                        .then(axiosResponse => {
                        let body;
                        body = models_1.ObjectSerializer.deserialize(axiosResponse.data, "GetCampaignMessageCampaignRelationshipListResponse");
                        resolve({ response: axiosResponse, body: body });
                    })
                        .catch(error => {
                        reject(error);
                    });
                });
            }, this.session.getRetryOptions());
        });
    }
    getCampaignMessageRelationshipsTemplate(id) {
        return __awaiter(this, void 0, void 0, function* () {
            const localVarPath = this.basePath + '/api/campaign-messages/{id}/relationships/template/'
                .replace('{' + 'id' + '}', encodeURIComponent(String(id)));
            let localVarQueryParameters = {};
            let localVarHeaderParams = Object.assign({}, this._defaultHeaders);
            const produces = ['application/json'];
            if (produces.indexOf('application/json') >= 0) {
                localVarHeaderParams.Accept = 'application/json';
            }
            else {
                localVarHeaderParams.Accept = produces.join(',');
            }
            if (id === null || id === undefined) {
                throw new Error('Required parameter id was null or undefined when calling getCampaignMessageRelationshipsTemplate.');
            }
            (0, apis_1.queryParamPreProcessor)(localVarQueryParameters);
            let config = {
                method: 'GET',
                url: localVarPath,
                headers: localVarHeaderParams,
                params: localVarQueryParameters,
            };
            this.session.applyToRequest(config);
            return (0, exponential_backoff_1.backOff)(() => {
                return new Promise((resolve, reject) => {
                    axios(config)
                        .then(axiosResponse => {
                        let body;
                        body = models_1.ObjectSerializer.deserialize(axiosResponse.data, "GetCampaignMessageTemplateRelationshipListResponse");
                        resolve({ response: axiosResponse, body: body });
                    })
                        .catch(error => {
                        reject(error);
                    });
                });
            }, this.session.getRetryOptions());
        });
    }
    getCampaignMessageTemplate(id, options = {}) {
        return __awaiter(this, void 0, void 0, function* () {
            const localVarPath = this.basePath + '/api/campaign-messages/{id}/template/'
                .replace('{' + 'id' + '}', encodeURIComponent(String(id)));
            let localVarQueryParameters = {};
            let localVarHeaderParams = Object.assign({}, this._defaultHeaders);
            const produces = ['application/json'];
            if (produces.indexOf('application/json') >= 0) {
                localVarHeaderParams.Accept = 'application/json';
            }
            else {
                localVarHeaderParams.Accept = produces.join(',');
            }
            if (id === null || id === undefined) {
                throw new Error('Required parameter id was null or undefined when calling getCampaignMessageTemplate.');
            }
            if (options.fieldsTemplate !== undefined) {
                localVarQueryParameters['fields[template]'] = models_1.ObjectSerializer.serialize(options.fieldsTemplate, "Array<'name' | 'editor_type' | 'html' | 'text' | 'created' | 'updated'>");
            }
            (0, apis_1.queryParamPreProcessor)(localVarQueryParameters);
            let config = {
                method: 'GET',
                url: localVarPath,
                headers: localVarHeaderParams,
                params: localVarQueryParameters,
            };
            this.session.applyToRequest(config);
            return (0, exponential_backoff_1.backOff)(() => {
                return new Promise((resolve, reject) => {
                    axios(config)
                        .then(axiosResponse => {
                        let body;
                        body = models_1.ObjectSerializer.deserialize(axiosResponse.data, "GetTemplateResponse");
                        resolve({ response: axiosResponse, body: body });
                    })
                        .catch(error => {
                        reject(error);
                    });
                });
            }, this.session.getRetryOptions());
        });
    }
    getCampaignRecipientEstimation(id, options = {}) {
        return __awaiter(this, void 0, void 0, function* () {
            const localVarPath = this.basePath + '/api/campaign-recipient-estimations/{id}/'
                .replace('{' + 'id' + '}', encodeURIComponent(String(id)));
            let localVarQueryParameters = {};
            let localVarHeaderParams = Object.assign({}, this._defaultHeaders);
            const produces = ['application/json'];
            if (produces.indexOf('application/json') >= 0) {
                localVarHeaderParams.Accept = 'application/json';
            }
            else {
                localVarHeaderParams.Accept = produces.join(',');
            }
            if (id === null || id === undefined) {
                throw new Error('Required parameter id was null or undefined when calling getCampaignRecipientEstimation.');
            }
            if (options.fieldsCampaignRecipientEstimation !== undefined) {
                localVarQueryParameters['fields[campaign-recipient-estimation]'] = models_1.ObjectSerializer.serialize(options.fieldsCampaignRecipientEstimation, "Array<'estimated_recipient_count'>");
            }
            (0, apis_1.queryParamPreProcessor)(localVarQueryParameters);
            let config = {
                method: 'GET',
                url: localVarPath,
                headers: localVarHeaderParams,
                params: localVarQueryParameters,
            };
            this.session.applyToRequest(config);
            return (0, exponential_backoff_1.backOff)(() => {
                return new Promise((resolve, reject) => {
                    axios(config)
                        .then(axiosResponse => {
                        let body;
                        body = models_1.ObjectSerializer.deserialize(axiosResponse.data, "GetCampaignRecipientEstimationResponse");
                        resolve({ response: axiosResponse, body: body });
                    })
                        .catch(error => {
                        reject(error);
                    });
                });
            }, this.session.getRetryOptions());
        });
    }
    getCampaignRecipientEstimationJob(id, options = {}) {
        return __awaiter(this, void 0, void 0, function* () {
            const localVarPath = this.basePath + '/api/campaign-recipient-estimation-jobs/{id}/'
                .replace('{' + 'id' + '}', encodeURIComponent(String(id)));
            let localVarQueryParameters = {};
            let localVarHeaderParams = Object.assign({}, this._defaultHeaders);
            const produces = ['application/json'];
            if (produces.indexOf('application/json') >= 0) {
                localVarHeaderParams.Accept = 'application/json';
            }
            else {
                localVarHeaderParams.Accept = produces.join(',');
            }
            if (id === null || id === undefined) {
                throw new Error('Required parameter id was null or undefined when calling getCampaignRecipientEstimationJob.');
            }
            if (options.fieldsCampaignRecipientEstimationJob !== undefined) {
                localVarQueryParameters['fields[campaign-recipient-estimation-job]'] = models_1.ObjectSerializer.serialize(options.fieldsCampaignRecipientEstimationJob, "Array<'status'>");
            }
            (0, apis_1.queryParamPreProcessor)(localVarQueryParameters);
            let config = {
                method: 'GET',
                url: localVarPath,
                headers: localVarHeaderParams,
                params: localVarQueryParameters,
            };
            this.session.applyToRequest(config);
            return (0, exponential_backoff_1.backOff)(() => {
                return new Promise((resolve, reject) => {
                    axios(config)
                        .then(axiosResponse => {
                        let body;
                        body = models_1.ObjectSerializer.deserialize(axiosResponse.data, "GetCampaignRecipientEstimationJobResponse");
                        resolve({ response: axiosResponse, body: body });
                    })
                        .catch(error => {
                        reject(error);
                    });
                });
            }, this.session.getRetryOptions());
        });
    }
    getCampaignRelationshipsCampaignMessages(id) {
        return __awaiter(this, void 0, void 0, function* () {
            const localVarPath = this.basePath + '/api/campaigns/{id}/relationships/campaign-messages/'
                .replace('{' + 'id' + '}', encodeURIComponent(String(id)));
            let localVarQueryParameters = {};
            let localVarHeaderParams = Object.assign({}, this._defaultHeaders);
            const produces = ['application/json'];
            if (produces.indexOf('application/json') >= 0) {
                localVarHeaderParams.Accept = 'application/json';
            }
            else {
                localVarHeaderParams.Accept = produces.join(',');
            }
            if (id === null || id === undefined) {
                throw new Error('Required parameter id was null or undefined when calling getCampaignRelationshipsCampaignMessages.');
            }
            (0, apis_1.queryParamPreProcessor)(localVarQueryParameters);
            let config = {
                method: 'GET',
                url: localVarPath,
                headers: localVarHeaderParams,
                params: localVarQueryParameters,
            };
            this.session.applyToRequest(config);
            return (0, exponential_backoff_1.backOff)(() => {
                return new Promise((resolve, reject) => {
                    axios(config)
                        .then(axiosResponse => {
                        let body;
                        body = models_1.ObjectSerializer.deserialize(axiosResponse.data, "GetCampaignMessagesRelationshipListResponseCollection");
                        resolve({ response: axiosResponse, body: body });
                    })
                        .catch(error => {
                        reject(error);
                    });
                });
            }, this.session.getRetryOptions());
        });
    }
    getCampaignRelationshipsTags(id) {
        return __awaiter(this, void 0, void 0, function* () {
            const localVarPath = this.basePath + '/api/campaigns/{id}/relationships/tags/'
                .replace('{' + 'id' + '}', encodeURIComponent(String(id)));
            let localVarQueryParameters = {};
            let localVarHeaderParams = Object.assign({}, this._defaultHeaders);
            const produces = ['application/json'];
            if (produces.indexOf('application/json') >= 0) {
                localVarHeaderParams.Accept = 'application/json';
            }
            else {
                localVarHeaderParams.Accept = produces.join(',');
            }
            if (id === null || id === undefined) {
                throw new Error('Required parameter id was null or undefined when calling getCampaignRelationshipsTags.');
            }
            (0, apis_1.queryParamPreProcessor)(localVarQueryParameters);
            let config = {
                method: 'GET',
                url: localVarPath,
                headers: localVarHeaderParams,
                params: localVarQueryParameters,
            };
            this.session.applyToRequest(config);
            return (0, exponential_backoff_1.backOff)(() => {
                return new Promise((resolve, reject) => {
                    axios(config)
                        .then(axiosResponse => {
                        let body;
                        body = models_1.ObjectSerializer.deserialize(axiosResponse.data, "GetCampaignTagRelationshipListResponseCollection");
                        resolve({ response: axiosResponse, body: body });
                    })
                        .catch(error => {
                        reject(error);
                    });
                });
            }, this.session.getRetryOptions());
        });
    }
    getCampaignSendJob(id, options = {}) {
        return __awaiter(this, void 0, void 0, function* () {
            const localVarPath = this.basePath + '/api/campaign-send-jobs/{id}/'
                .replace('{' + 'id' + '}', encodeURIComponent(String(id)));
            let localVarQueryParameters = {};
            let localVarHeaderParams = Object.assign({}, this._defaultHeaders);
            const produces = ['application/json'];
            if (produces.indexOf('application/json') >= 0) {
                localVarHeaderParams.Accept = 'application/json';
            }
            else {
                localVarHeaderParams.Accept = produces.join(',');
            }
            if (id === null || id === undefined) {
                throw new Error('Required parameter id was null or undefined when calling getCampaignSendJob.');
            }
            if (options.fieldsCampaignSendJob !== undefined) {
                localVarQueryParameters['fields[campaign-send-job]'] = models_1.ObjectSerializer.serialize(options.fieldsCampaignSendJob, "Array<'status'>");
            }
            (0, apis_1.queryParamPreProcessor)(localVarQueryParameters);
            let config = {
                method: 'GET',
                url: localVarPath,
                headers: localVarHeaderParams,
                params: localVarQueryParameters,
            };
            this.session.applyToRequest(config);
            return (0, exponential_backoff_1.backOff)(() => {
                return new Promise((resolve, reject) => {
                    axios(config)
                        .then(axiosResponse => {
                        let body;
                        body = models_1.ObjectSerializer.deserialize(axiosResponse.data, "GetCampaignSendJobResponse");
                        resolve({ response: axiosResponse, body: body });
                    })
                        .catch(error => {
                        reject(error);
                    });
                });
            }, this.session.getRetryOptions());
        });
    }
    getCampaignTags(id, options = {}) {
        return __awaiter(this, void 0, void 0, function* () {
            const localVarPath = this.basePath + '/api/campaigns/{id}/tags/'
                .replace('{' + 'id' + '}', encodeURIComponent(String(id)));
            let localVarQueryParameters = {};
            let localVarHeaderParams = Object.assign({}, this._defaultHeaders);
            const produces = ['application/json'];
            if (produces.indexOf('application/json') >= 0) {
                localVarHeaderParams.Accept = 'application/json';
            }
            else {
                localVarHeaderParams.Accept = produces.join(',');
            }
            if (id === null || id === undefined) {
                throw new Error('Required parameter id was null or undefined when calling getCampaignTags.');
            }
            if (options.fieldsTag !== undefined) {
                localVarQueryParameters['fields[tag]'] = models_1.ObjectSerializer.serialize(options.fieldsTag, "Array<'name'>");
            }
            (0, apis_1.queryParamPreProcessor)(localVarQueryParameters);
            let config = {
                method: 'GET',
                url: localVarPath,
                headers: localVarHeaderParams,
                params: localVarQueryParameters,
            };
            this.session.applyToRequest(config);
            return (0, exponential_backoff_1.backOff)(() => {
                return new Promise((resolve, reject) => {
                    axios(config)
                        .then(axiosResponse => {
                        let body;
                        body = models_1.ObjectSerializer.deserialize(axiosResponse.data, "GetTagResponseCollection");
                        resolve({ response: axiosResponse, body: body });
                    })
                        .catch(error => {
                        reject(error);
                    });
                });
            }, this.session.getRetryOptions());
        });
    }
    getCampaigns(filter, options = {}) {
        return __awaiter(this, void 0, void 0, function* () {
            const localVarPath = this.basePath + '/api/campaigns/';
            let localVarQueryParameters = {};
            let localVarHeaderParams = Object.assign({}, this._defaultHeaders);
            const produces = ['application/json'];
            if (produces.indexOf('application/json') >= 0) {
                localVarHeaderParams.Accept = 'application/json';
            }
            else {
                localVarHeaderParams.Accept = produces.join(',');
            }
            if (filter === null || filter === undefined) {
                throw new Error('Required parameter filter was null or undefined when calling getCampaigns.');
            }
            localVarQueryParameters['filter'] = models_1.ObjectSerializer.serialize(filter, "string");
            if (options.fieldsCampaignMessage !== undefined) {
                localVarQueryParameters['fields[campaign-message]'] = models_1.ObjectSerializer.serialize(options.fieldsCampaignMessage, "Array<'label' | 'channel' | 'content' | 'send_times' | 'render_options' | 'render_options.shorten_links' | 'render_options.add_org_prefix' | 'render_options.add_info_link' | 'render_options.add_opt_out_language' | 'created_at' | 'updated_at'>");
            }
            if (options.fieldsCampaign !== undefined) {
                localVarQueryParameters['fields[campaign]'] = models_1.ObjectSerializer.serialize(options.fieldsCampaign, "Array<'name' | 'status' | 'archived' | 'audiences' | 'audiences.included' | 'audiences.excluded' | 'send_options' | 'tracking_options' | 'send_strategy' | 'send_strategy.method' | 'send_strategy.options_static' | 'send_strategy.options_static.datetime' | 'send_strategy.options_static.is_local' | 'send_strategy.options_static.send_past_recipients_immediately' | 'send_strategy.options_throttled' | 'send_strategy.options_throttled.datetime' | 'send_strategy.options_throttled.throttle_percentage' | 'send_strategy.options_sto' | 'send_strategy.options_sto.date' | 'created_at' | 'scheduled_at' | 'updated_at' | 'send_time'>");
            }
            if (options.fieldsTag !== undefined) {
                localVarQueryParameters['fields[tag]'] = models_1.ObjectSerializer.serialize(options.fieldsTag, "Array<'name'>");
            }
            if (options.include !== undefined) {
                localVarQueryParameters['include'] = models_1.ObjectSerializer.serialize(options.include, "Array<'campaign-messages' | 'tags'>");
            }
            if (options.pageCursor !== undefined) {
                localVarQueryParameters['page[cursor]'] = models_1.ObjectSerializer.serialize(options.pageCursor, "string");
            }
            if (options.sort !== undefined) {
                localVarQueryParameters['sort'] = models_1.ObjectSerializer.serialize(options.sort, "'created_at' | '-created_at' | 'id' | '-id' | 'name' | '-name' | 'scheduled_at' | '-scheduled_at' | 'updated_at' | '-updated_at'");
            }
            (0, apis_1.queryParamPreProcessor)(localVarQueryParameters);
            let config = {
                method: 'GET',
                url: localVarPath,
                headers: localVarHeaderParams,
                params: localVarQueryParameters,
            };
            this.session.applyToRequest(config);
            return (0, exponential_backoff_1.backOff)(() => {
                return new Promise((resolve, reject) => {
                    axios(config)
                        .then(axiosResponse => {
                        let body;
                        body = models_1.ObjectSerializer.deserialize(axiosResponse.data, "GetCampaignResponseCollectionCompoundDocument");
                        resolve({ response: axiosResponse, body: body });
                    })
                        .catch(error => {
                        reject(error);
                    });
                });
            }, this.session.getRetryOptions());
        });
    }
    updateCampaign(id, campaignPartialUpdateQuery) {
        return __awaiter(this, void 0, void 0, function* () {
            const localVarPath = this.basePath + '/api/campaigns/{id}/'
                .replace('{' + 'id' + '}', encodeURIComponent(String(id)));
            let localVarQueryParameters = {};
            let localVarHeaderParams = Object.assign({}, this._defaultHeaders);
            const produces = ['application/json'];
            if (produces.indexOf('application/json') >= 0) {
                localVarHeaderParams.Accept = 'application/json';
            }
            else {
                localVarHeaderParams.Accept = produces.join(',');
            }
            if (id === null || id === undefined) {
                throw new Error('Required parameter id was null or undefined when calling updateCampaign.');
            }
            if (campaignPartialUpdateQuery === null || campaignPartialUpdateQuery === undefined) {
                throw new Error('Required parameter campaignPartialUpdateQuery was null or undefined when calling updateCampaign.');
            }
            (0, apis_1.queryParamPreProcessor)(localVarQueryParameters);
            let config = {
                method: 'PATCH',
                url: localVarPath,
                headers: localVarHeaderParams,
                params: localVarQueryParameters,
                data: models_1.ObjectSerializer.serialize(campaignPartialUpdateQuery, "CampaignPartialUpdateQuery")
            };
            this.session.applyToRequest(config);
            return (0, exponential_backoff_1.backOff)(() => {
                return new Promise((resolve, reject) => {
                    axios(config)
                        .then(axiosResponse => {
                        let body;
                        body = models_1.ObjectSerializer.deserialize(axiosResponse.data, "PatchCampaignResponse");
                        resolve({ response: axiosResponse, body: body });
                    })
                        .catch(error => {
                        reject(error);
                    });
                });
            }, this.session.getRetryOptions());
        });
    }
    updateCampaignMessage(id, campaignMessagePartialUpdateQuery) {
        return __awaiter(this, void 0, void 0, function* () {
            const localVarPath = this.basePath + '/api/campaign-messages/{id}/'
                .replace('{' + 'id' + '}', encodeURIComponent(String(id)));
            let localVarQueryParameters = {};
            let localVarHeaderParams = Object.assign({}, this._defaultHeaders);
            const produces = ['application/json'];
            if (produces.indexOf('application/json') >= 0) {
                localVarHeaderParams.Accept = 'application/json';
            }
            else {
                localVarHeaderParams.Accept = produces.join(',');
            }
            if (id === null || id === undefined) {
                throw new Error('Required parameter id was null or undefined when calling updateCampaignMessage.');
            }
            if (campaignMessagePartialUpdateQuery === null || campaignMessagePartialUpdateQuery === undefined) {
                throw new Error('Required parameter campaignMessagePartialUpdateQuery was null or undefined when calling updateCampaignMessage.');
            }
            (0, apis_1.queryParamPreProcessor)(localVarQueryParameters);
            let config = {
                method: 'PATCH',
                url: localVarPath,
                headers: localVarHeaderParams,
                params: localVarQueryParameters,
                data: models_1.ObjectSerializer.serialize(campaignMessagePartialUpdateQuery, "CampaignMessagePartialUpdateQuery")
            };
            this.session.applyToRequest(config);
            return (0, exponential_backoff_1.backOff)(() => {
                return new Promise((resolve, reject) => {
                    axios(config)
                        .then(axiosResponse => {
                        let body;
                        body = models_1.ObjectSerializer.deserialize(axiosResponse.data, "PatchCampaignMessageResponse");
                        resolve({ response: axiosResponse, body: body });
                    })
                        .catch(error => {
                        reject(error);
                    });
                });
            }, this.session.getRetryOptions());
        });
    }
    updateCampaignSendJob(id, campaignSendJobPartialUpdateQuery) {
        return __awaiter(this, void 0, void 0, function* () {
            const localVarPath = this.basePath + '/api/campaign-send-jobs/{id}/'
                .replace('{' + 'id' + '}', encodeURIComponent(String(id)));
            let localVarQueryParameters = {};
            let localVarHeaderParams = Object.assign({}, this._defaultHeaders);
            const produces = ['application/json'];
            if (produces.indexOf('application/json') >= 0) {
                localVarHeaderParams.Accept = 'application/json';
            }
            else {
                localVarHeaderParams.Accept = produces.join(',');
            }
            if (id === null || id === undefined) {
                throw new Error('Required parameter id was null or undefined when calling updateCampaignSendJob.');
            }
            if (campaignSendJobPartialUpdateQuery === null || campaignSendJobPartialUpdateQuery === undefined) {
                throw new Error('Required parameter campaignSendJobPartialUpdateQuery was null or undefined when calling updateCampaignSendJob.');
            }
            (0, apis_1.queryParamPreProcessor)(localVarQueryParameters);
            let config = {
                method: 'PATCH',
                url: localVarPath,
                headers: localVarHeaderParams,
                params: localVarQueryParameters,
                data: models_1.ObjectSerializer.serialize(campaignSendJobPartialUpdateQuery, "CampaignSendJobPartialUpdateQuery")
            };
            this.session.applyToRequest(config);
            return (0, exponential_backoff_1.backOff)(() => {
                return new Promise((resolve, reject) => {
                    axios(config)
                        .then(axiosResponse => {
                        let body;
                        resolve({ response: axiosResponse, body: body });
                    })
                        .catch(error => {
                        reject(error);
                    });
                });
            }, this.session.getRetryOptions());
        });
    }
}
exports.CampaignsApi = CampaignsApi;
//# sourceMappingURL=campaignsApi.js.map