import { AxiosResponse } from "axios";
import { BackoffOptions } from 'exponential-backoff';
import { GetImageResponse } from '../model/getImageResponse';
import { GetImageResponseCollection } from '../model/getImageResponseCollection';
import { ImageCreateQuery } from '../model/imageCreateQuery';
import { ImagePartialUpdateQuery } from '../model/imagePartialUpdateQuery';
import { PatchImageResponse } from '../model/patchImageResponse';
import { PostImageResponse } from '../model/postImageResponse';
import { RequestFile, Session } from './apis';
export declare class ImagesApi {
    protected backoffOptions: BackoffOptions;
    session: Session;
    protected _basePath: string;
    protected _defaultHeaders: any;
    protected _useQuerystring: boolean;
    constructor(session: Session);
    set useQuerystring(value: boolean);
    set basePath(basePath: string);
    set defaultHeaders(defaultHeaders: any);
    get defaultHeaders(): any;
    get basePath(): string;
    getImage(id: string, options?: {
        fieldsImage?: Array<'name' | 'image_url' | 'format' | 'size' | 'hidden' | 'updated_at'>;
    }): Promise<{
        response: AxiosResponse;
        body: GetImageResponse;
    }>;
    getImages(options?: {
        fieldsImage?: Array<'name' | 'image_url' | 'format' | 'size' | 'hidden' | 'updated_at'>;
        filter?: string;
        pageCursor?: string;
        pageSize?: number;
        sort?: 'format' | '-format' | 'id' | '-id' | 'name' | '-name' | 'size' | '-size' | 'updated_at' | '-updated_at';
    }): Promise<{
        response: AxiosResponse;
        body: GetImageResponseCollection;
    }>;
    updateImage(id: string, imagePartialUpdateQuery: ImagePartialUpdateQuery): Promise<{
        response: AxiosResponse;
        body: PatchImageResponse;
    }>;
    uploadImageFromFile(file: RequestFile, name?: string, hidden?: boolean): Promise<{
        response: AxiosResponse;
        body: PostImageResponse;
    }>;
    uploadImageFromUrl(imageCreateQuery: ImageCreateQuery): Promise<{
        response: AxiosResponse;
        body: PostImageResponse;
    }>;
}
