import { AxiosResponse } from "axios";
import { BackoffOptions } from 'exponential-backoff';
import { DeleteTagGroupResponse } from '../model/deleteTagGroupResponse';
import { GetTagCampaignRelationshipsResponseCollection } from '../model/getTagCampaignRelationshipsResponseCollection';
import { GetTagFlowRelationshipsResponseCollection } from '../model/getTagFlowRelationshipsResponseCollection';
import { GetTagGroupResponse } from '../model/getTagGroupResponse';
import { GetTagGroupResponseCollection } from '../model/getTagGroupResponseCollection';
import { GetTagGroupTagRelationshipsResponseCollection } from '../model/getTagGroupTagRelationshipsResponseCollection';
import { GetTagListRelationshipsResponseCollection } from '../model/getTagListRelationshipsResponseCollection';
import { GetTagResponseCollection } from '../model/getTagResponseCollection';
import { GetTagResponseCollectionCompoundDocument } from '../model/getTagResponseCollectionCompoundDocument';
import { GetTagResponseCompoundDocument } from '../model/getTagResponseCompoundDocument';
import { GetTagSegmentRelationshipsResponseCollection } from '../model/getTagSegmentRelationshipsResponseCollection';
import { GetTagTagGroupRelationshipsResponse } from '../model/getTagTagGroupRelationshipsResponse';
import { PatchTagGroupResponse } from '../model/patchTagGroupResponse';
import { PostTagGroupResponse } from '../model/postTagGroupResponse';
import { PostTagResponse } from '../model/postTagResponse';
import { TagCampaignOp } from '../model/tagCampaignOp';
import { TagCreateQuery } from '../model/tagCreateQuery';
import { TagFlowOp } from '../model/tagFlowOp';
import { TagGroupCreateQuery } from '../model/tagGroupCreateQuery';
import { TagGroupUpdateQuery } from '../model/tagGroupUpdateQuery';
import { TagListOp } from '../model/tagListOp';
import { TagSegmentOp } from '../model/tagSegmentOp';
import { TagUpdateQuery } from '../model/tagUpdateQuery';
import { Session } from './apis';
export declare class TagsApi {
    protected backoffOptions: BackoffOptions;
    session: Session;
    protected _basePath: string;
    protected _defaultHeaders: any;
    protected _useQuerystring: boolean;
    constructor(session: Session);
    set useQuerystring(value: boolean);
    set basePath(basePath: string);
    set defaultHeaders(defaultHeaders: any);
    get defaultHeaders(): any;
    get basePath(): string;
    createTag(tagCreateQuery: TagCreateQuery): Promise<{
        response: AxiosResponse;
        body: PostTagResponse;
    }>;
    createTagGroup(tagGroupCreateQuery: TagGroupCreateQuery): Promise<{
        response: AxiosResponse;
        body: PostTagGroupResponse;
    }>;
    createTagRelationshipsCampaigns(id: string, tagCampaignOp: TagCampaignOp): Promise<{
        response: AxiosResponse;
        body?: any;
    }>;
    createTagRelationshipsFlows(id: string, tagFlowOp: TagFlowOp): Promise<{
        response: AxiosResponse;
        body?: any;
    }>;
    createTagRelationshipsLists(id: string, tagListOp: TagListOp): Promise<{
        response: AxiosResponse;
        body?: any;
    }>;
    createTagRelationshipsSegments(id: string, tagSegmentOp: TagSegmentOp): Promise<{
        response: AxiosResponse;
        body?: any;
    }>;
    deleteTag(id: string): Promise<{
        response: AxiosResponse;
        body?: any;
    }>;
    deleteTagGroup(id: string): Promise<{
        response: AxiosResponse;
        body: DeleteTagGroupResponse;
    }>;
    deleteTagRelationshipsCampaigns(id: string, tagCampaignOp: TagCampaignOp): Promise<{
        response: AxiosResponse;
        body?: any;
    }>;
    deleteTagRelationshipsFlows(id: string, tagFlowOp: TagFlowOp): Promise<{
        response: AxiosResponse;
        body?: any;
    }>;
    deleteTagRelationshipsLists(id: string, tagListOp: TagListOp): Promise<{
        response: AxiosResponse;
        body?: any;
    }>;
    deleteTagRelationshipsSegments(id: string, tagSegmentOp: TagSegmentOp): Promise<{
        response: AxiosResponse;
        body?: any;
    }>;
    getTag(id: string, options?: {
        fieldsTagGroup?: Array<'name' | 'exclusive' | 'default'>;
        fieldsTag?: Array<'name'>;
        include?: Array<'tag-group'>;
    }): Promise<{
        response: AxiosResponse;
        body: GetTagResponseCompoundDocument;
    }>;
    getTagGroup(id: string, options?: {
        fieldsTagGroup?: Array<'name' | 'exclusive' | 'default'>;
    }): Promise<{
        response: AxiosResponse;
        body: GetTagGroupResponse;
    }>;
    getTagGroupRelationshipsTags(id: string): Promise<{
        response: AxiosResponse;
        body: GetTagGroupTagRelationshipsResponseCollection;
    }>;
    getTagGroupTags(id: string, options?: {
        fieldsTag?: Array<'name'>;
    }): Promise<{
        response: AxiosResponse;
        body: GetTagResponseCollection;
    }>;
    getTagGroups(options?: {
        fieldsTagGroup?: Array<'name' | 'exclusive' | 'default'>;
        filter?: string;
        pageCursor?: string;
        sort?: 'id' | '-id' | 'name' | '-name';
    }): Promise<{
        response: AxiosResponse;
        body: GetTagGroupResponseCollection;
    }>;
    getTagRelationshipsCampaigns(id: string): Promise<{
        response: AxiosResponse;
        body: GetTagCampaignRelationshipsResponseCollection;
    }>;
    getTagRelationshipsFlows(id: string): Promise<{
        response: AxiosResponse;
        body: GetTagFlowRelationshipsResponseCollection;
    }>;
    getTagRelationshipsLists(id: string): Promise<{
        response: AxiosResponse;
        body: GetTagListRelationshipsResponseCollection;
    }>;
    getTagRelationshipsSegments(id: string): Promise<{
        response: AxiosResponse;
        body: GetTagSegmentRelationshipsResponseCollection;
    }>;
    getTagRelationshipsTagGroup(id: string): Promise<{
        response: AxiosResponse;
        body: GetTagTagGroupRelationshipsResponse;
    }>;
    getTagTagGroup(id: string, options?: {
        fieldsTagGroup?: Array<'name' | 'exclusive' | 'default'>;
    }): Promise<{
        response: AxiosResponse;
        body: GetTagGroupResponse;
    }>;
    getTags(options?: {
        fieldsTagGroup?: Array<'name' | 'exclusive' | 'default'>;
        fieldsTag?: Array<'name'>;
        filter?: string;
        include?: Array<'tag-group'>;
        pageCursor?: string;
        sort?: 'id' | '-id' | 'name' | '-name';
    }): Promise<{
        response: AxiosResponse;
        body: GetTagResponseCollectionCompoundDocument;
    }>;
    updateTag(id: string, tagUpdateQuery: TagUpdateQuery): Promise<{
        response: AxiosResponse;
        body?: any;
    }>;
    updateTagGroup(id: string, tagGroupUpdateQuery: TagGroupUpdateQuery): Promise<{
        response: AxiosResponse;
        body: PatchTagGroupResponse;
    }>;
}
