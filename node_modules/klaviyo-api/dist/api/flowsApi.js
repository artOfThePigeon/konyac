"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.FlowsApi = void 0;
const axios = require('axios');
const exponential_backoff_1 = require("exponential-backoff");
const models_1 = require("../model/models");
const apis_1 = require("./apis");
let defaultBasePath = 'https://a.klaviyo.com';
class FlowsApi {
    constructor(session) {
        this.backoffOptions = new apis_1.RetryOptions().options;
        this._basePath = defaultBasePath;
        this._defaultHeaders = {
            revision: "2023-09-15",
            "User-Agent": "klaviyo-api-node/6.0.1"
        };
        this._useQuerystring = false;
        this.session = session;
    }
    set useQuerystring(value) {
        this._useQuerystring = value;
    }
    set basePath(basePath) {
        this._basePath = basePath;
    }
    set defaultHeaders(defaultHeaders) {
        this._defaultHeaders = defaultHeaders;
    }
    get defaultHeaders() {
        return this._defaultHeaders;
    }
    get basePath() {
        return this._basePath;
    }
    getFlow(id, options = {}) {
        return __awaiter(this, void 0, void 0, function* () {
            const localVarPath = this.basePath + '/api/flows/{id}/'
                .replace('{' + 'id' + '}', encodeURIComponent(String(id)));
            let localVarQueryParameters = {};
            let localVarHeaderParams = Object.assign({}, this._defaultHeaders);
            const produces = ['application/json'];
            if (produces.indexOf('application/json') >= 0) {
                localVarHeaderParams.Accept = 'application/json';
            }
            else {
                localVarHeaderParams.Accept = produces.join(',');
            }
            if (id === null || id === undefined) {
                throw new Error('Required parameter id was null or undefined when calling getFlow.');
            }
            if (options.fieldsFlowAction !== undefined) {
                localVarQueryParameters['fields[flow-action]'] = models_1.ObjectSerializer.serialize(options.fieldsFlowAction, "Array<'action_type' | 'status' | 'created' | 'updated' | 'settings' | 'tracking_options' | 'send_options' | 'send_options.use_smart_sending' | 'send_options.is_transactional' | 'render_options' | 'render_options.shorten_links' | 'render_options.add_org_prefix' | 'render_options.add_info_link' | 'render_options.add_opt_out_language'>");
            }
            if (options.fieldsFlow !== undefined) {
                localVarQueryParameters['fields[flow]'] = models_1.ObjectSerializer.serialize(options.fieldsFlow, "Array<'name' | 'status' | 'archived' | 'created' | 'updated' | 'trigger_type'>");
            }
            if (options.fieldsTag !== undefined) {
                localVarQueryParameters['fields[tag]'] = models_1.ObjectSerializer.serialize(options.fieldsTag, "Array<'name'>");
            }
            if (options.include !== undefined) {
                localVarQueryParameters['include'] = models_1.ObjectSerializer.serialize(options.include, "Array<'flow-actions' | 'tags'>");
            }
            (0, apis_1.queryParamPreProcessor)(localVarQueryParameters);
            let config = {
                method: 'GET',
                url: localVarPath,
                headers: localVarHeaderParams,
                params: localVarQueryParameters,
            };
            this.session.applyToRequest(config);
            return (0, exponential_backoff_1.backOff)(() => {
                return new Promise((resolve, reject) => {
                    axios(config)
                        .then(axiosResponse => {
                        let body;
                        body = models_1.ObjectSerializer.deserialize(axiosResponse.data, "GetFlowResponseCompoundDocument");
                        resolve({ response: axiosResponse, body: body });
                    })
                        .catch(error => {
                        reject(error);
                    });
                });
            }, this.session.getRetryOptions());
        });
    }
    getFlowAction(id, options = {}) {
        return __awaiter(this, void 0, void 0, function* () {
            const localVarPath = this.basePath + '/api/flow-actions/{id}/'
                .replace('{' + 'id' + '}', encodeURIComponent(String(id)));
            let localVarQueryParameters = {};
            let localVarHeaderParams = Object.assign({}, this._defaultHeaders);
            const produces = ['application/json'];
            if (produces.indexOf('application/json') >= 0) {
                localVarHeaderParams.Accept = 'application/json';
            }
            else {
                localVarHeaderParams.Accept = produces.join(',');
            }
            if (id === null || id === undefined) {
                throw new Error('Required parameter id was null or undefined when calling getFlowAction.');
            }
            if (options.fieldsFlowAction !== undefined) {
                localVarQueryParameters['fields[flow-action]'] = models_1.ObjectSerializer.serialize(options.fieldsFlowAction, "Array<'action_type' | 'status' | 'created' | 'updated' | 'settings' | 'tracking_options' | 'send_options' | 'send_options.use_smart_sending' | 'send_options.is_transactional' | 'render_options' | 'render_options.shorten_links' | 'render_options.add_org_prefix' | 'render_options.add_info_link' | 'render_options.add_opt_out_language'>");
            }
            if (options.fieldsFlowMessage !== undefined) {
                localVarQueryParameters['fields[flow-message]'] = models_1.ObjectSerializer.serialize(options.fieldsFlowMessage, "Array<'name' | 'channel' | 'content' | 'created' | 'updated'>");
            }
            if (options.fieldsFlow !== undefined) {
                localVarQueryParameters['fields[flow]'] = models_1.ObjectSerializer.serialize(options.fieldsFlow, "Array<'name' | 'status' | 'archived' | 'created' | 'updated' | 'trigger_type'>");
            }
            if (options.include !== undefined) {
                localVarQueryParameters['include'] = models_1.ObjectSerializer.serialize(options.include, "Array<'flow' | 'flow-messages'>");
            }
            (0, apis_1.queryParamPreProcessor)(localVarQueryParameters);
            let config = {
                method: 'GET',
                url: localVarPath,
                headers: localVarHeaderParams,
                params: localVarQueryParameters,
            };
            this.session.applyToRequest(config);
            return (0, exponential_backoff_1.backOff)(() => {
                return new Promise((resolve, reject) => {
                    axios(config)
                        .then(axiosResponse => {
                        let body;
                        body = models_1.ObjectSerializer.deserialize(axiosResponse.data, "GetFlowActionResponseCompoundDocument");
                        resolve({ response: axiosResponse, body: body });
                    })
                        .catch(error => {
                        reject(error);
                    });
                });
            }, this.session.getRetryOptions());
        });
    }
    getFlowActionFlow(id, options = {}) {
        return __awaiter(this, void 0, void 0, function* () {
            const localVarPath = this.basePath + '/api/flow-actions/{id}/flow/'
                .replace('{' + 'id' + '}', encodeURIComponent(String(id)));
            let localVarQueryParameters = {};
            let localVarHeaderParams = Object.assign({}, this._defaultHeaders);
            const produces = ['application/json'];
            if (produces.indexOf('application/json') >= 0) {
                localVarHeaderParams.Accept = 'application/json';
            }
            else {
                localVarHeaderParams.Accept = produces.join(',');
            }
            if (id === null || id === undefined) {
                throw new Error('Required parameter id was null or undefined when calling getFlowActionFlow.');
            }
            if (options.fieldsFlow !== undefined) {
                localVarQueryParameters['fields[flow]'] = models_1.ObjectSerializer.serialize(options.fieldsFlow, "Array<'name' | 'status' | 'archived' | 'created' | 'updated' | 'trigger_type'>");
            }
            (0, apis_1.queryParamPreProcessor)(localVarQueryParameters);
            let config = {
                method: 'GET',
                url: localVarPath,
                headers: localVarHeaderParams,
                params: localVarQueryParameters,
            };
            this.session.applyToRequest(config);
            return (0, exponential_backoff_1.backOff)(() => {
                return new Promise((resolve, reject) => {
                    axios(config)
                        .then(axiosResponse => {
                        let body;
                        body = models_1.ObjectSerializer.deserialize(axiosResponse.data, "GetFlowResponse");
                        resolve({ response: axiosResponse, body: body });
                    })
                        .catch(error => {
                        reject(error);
                    });
                });
            }, this.session.getRetryOptions());
        });
    }
    getFlowActionMessages(id, options = {}) {
        return __awaiter(this, void 0, void 0, function* () {
            const localVarPath = this.basePath + '/api/flow-actions/{id}/flow-messages/'
                .replace('{' + 'id' + '}', encodeURIComponent(String(id)));
            let localVarQueryParameters = {};
            let localVarHeaderParams = Object.assign({}, this._defaultHeaders);
            const produces = ['application/json'];
            if (produces.indexOf('application/json') >= 0) {
                localVarHeaderParams.Accept = 'application/json';
            }
            else {
                localVarHeaderParams.Accept = produces.join(',');
            }
            if (id === null || id === undefined) {
                throw new Error('Required parameter id was null or undefined when calling getFlowActionMessages.');
            }
            if (options.fieldsFlowMessage !== undefined) {
                localVarQueryParameters['fields[flow-message]'] = models_1.ObjectSerializer.serialize(options.fieldsFlowMessage, "Array<'name' | 'channel' | 'content' | 'created' | 'updated'>");
            }
            if (options.filter !== undefined) {
                localVarQueryParameters['filter'] = models_1.ObjectSerializer.serialize(options.filter, "string");
            }
            if (options.pageSize !== undefined) {
                localVarQueryParameters['page[size]'] = models_1.ObjectSerializer.serialize(options.pageSize, "number");
            }
            if (options.sort !== undefined) {
                localVarQueryParameters['sort'] = models_1.ObjectSerializer.serialize(options.sort, "'created' | '-created' | 'id' | '-id' | 'name' | '-name' | 'updated' | '-updated'");
            }
            (0, apis_1.queryParamPreProcessor)(localVarQueryParameters);
            let config = {
                method: 'GET',
                url: localVarPath,
                headers: localVarHeaderParams,
                params: localVarQueryParameters,
            };
            this.session.applyToRequest(config);
            return (0, exponential_backoff_1.backOff)(() => {
                return new Promise((resolve, reject) => {
                    axios(config)
                        .then(axiosResponse => {
                        let body;
                        body = models_1.ObjectSerializer.deserialize(axiosResponse.data, "GetFlowMessageResponseCollection");
                        resolve({ response: axiosResponse, body: body });
                    })
                        .catch(error => {
                        reject(error);
                    });
                });
            }, this.session.getRetryOptions());
        });
    }
    getFlowActionRelationshipsFlow(id) {
        return __awaiter(this, void 0, void 0, function* () {
            const localVarPath = this.basePath + '/api/flow-actions/{id}/relationships/flow/'
                .replace('{' + 'id' + '}', encodeURIComponent(String(id)));
            let localVarQueryParameters = {};
            let localVarHeaderParams = Object.assign({}, this._defaultHeaders);
            const produces = ['application/json'];
            if (produces.indexOf('application/json') >= 0) {
                localVarHeaderParams.Accept = 'application/json';
            }
            else {
                localVarHeaderParams.Accept = produces.join(',');
            }
            if (id === null || id === undefined) {
                throw new Error('Required parameter id was null or undefined when calling getFlowActionRelationshipsFlow.');
            }
            (0, apis_1.queryParamPreProcessor)(localVarQueryParameters);
            let config = {
                method: 'GET',
                url: localVarPath,
                headers: localVarHeaderParams,
                params: localVarQueryParameters,
            };
            this.session.applyToRequest(config);
            return (0, exponential_backoff_1.backOff)(() => {
                return new Promise((resolve, reject) => {
                    axios(config)
                        .then(axiosResponse => {
                        let body;
                        body = models_1.ObjectSerializer.deserialize(axiosResponse.data, "GetFlowActionFlowRelationshipResponse");
                        resolve({ response: axiosResponse, body: body });
                    })
                        .catch(error => {
                        reject(error);
                    });
                });
            }, this.session.getRetryOptions());
        });
    }
    getFlowActionRelationshipsMessages(id, options = {}) {
        return __awaiter(this, void 0, void 0, function* () {
            const localVarPath = this.basePath + '/api/flow-actions/{id}/relationships/flow-messages/'
                .replace('{' + 'id' + '}', encodeURIComponent(String(id)));
            let localVarQueryParameters = {};
            let localVarHeaderParams = Object.assign({}, this._defaultHeaders);
            const produces = ['application/json'];
            if (produces.indexOf('application/json') >= 0) {
                localVarHeaderParams.Accept = 'application/json';
            }
            else {
                localVarHeaderParams.Accept = produces.join(',');
            }
            if (id === null || id === undefined) {
                throw new Error('Required parameter id was null or undefined when calling getFlowActionRelationshipsMessages.');
            }
            if (options.filter !== undefined) {
                localVarQueryParameters['filter'] = models_1.ObjectSerializer.serialize(options.filter, "string");
            }
            if (options.pageCursor !== undefined) {
                localVarQueryParameters['page[cursor]'] = models_1.ObjectSerializer.serialize(options.pageCursor, "string");
            }
            if (options.pageSize !== undefined) {
                localVarQueryParameters['page[size]'] = models_1.ObjectSerializer.serialize(options.pageSize, "number");
            }
            if (options.sort !== undefined) {
                localVarQueryParameters['sort'] = models_1.ObjectSerializer.serialize(options.sort, "'created' | '-created' | 'id' | '-id' | 'name' | '-name' | 'updated' | '-updated'");
            }
            (0, apis_1.queryParamPreProcessor)(localVarQueryParameters);
            let config = {
                method: 'GET',
                url: localVarPath,
                headers: localVarHeaderParams,
                params: localVarQueryParameters,
            };
            this.session.applyToRequest(config);
            return (0, exponential_backoff_1.backOff)(() => {
                return new Promise((resolve, reject) => {
                    axios(config)
                        .then(axiosResponse => {
                        let body;
                        body = models_1.ObjectSerializer.deserialize(axiosResponse.data, "GetFlowActionFlowMessageRelationshipResponseCollection");
                        resolve({ response: axiosResponse, body: body });
                    })
                        .catch(error => {
                        reject(error);
                    });
                });
            }, this.session.getRetryOptions());
        });
    }
    getFlowFlowActions(id, options = {}) {
        return __awaiter(this, void 0, void 0, function* () {
            const localVarPath = this.basePath + '/api/flows/{id}/flow-actions/'
                .replace('{' + 'id' + '}', encodeURIComponent(String(id)));
            let localVarQueryParameters = {};
            let localVarHeaderParams = Object.assign({}, this._defaultHeaders);
            const produces = ['application/json'];
            if (produces.indexOf('application/json') >= 0) {
                localVarHeaderParams.Accept = 'application/json';
            }
            else {
                localVarHeaderParams.Accept = produces.join(',');
            }
            if (id === null || id === undefined) {
                throw new Error('Required parameter id was null or undefined when calling getFlowFlowActions.');
            }
            if (options.fieldsFlowAction !== undefined) {
                localVarQueryParameters['fields[flow-action]'] = models_1.ObjectSerializer.serialize(options.fieldsFlowAction, "Array<'action_type' | 'status' | 'created' | 'updated' | 'settings' | 'tracking_options' | 'send_options' | 'send_options.use_smart_sending' | 'send_options.is_transactional' | 'render_options' | 'render_options.shorten_links' | 'render_options.add_org_prefix' | 'render_options.add_info_link' | 'render_options.add_opt_out_language'>");
            }
            if (options.filter !== undefined) {
                localVarQueryParameters['filter'] = models_1.ObjectSerializer.serialize(options.filter, "string");
            }
            if (options.pageCursor !== undefined) {
                localVarQueryParameters['page[cursor]'] = models_1.ObjectSerializer.serialize(options.pageCursor, "string");
            }
            if (options.pageSize !== undefined) {
                localVarQueryParameters['page[size]'] = models_1.ObjectSerializer.serialize(options.pageSize, "number");
            }
            if (options.sort !== undefined) {
                localVarQueryParameters['sort'] = models_1.ObjectSerializer.serialize(options.sort, "'action_type' | '-action_type' | 'created' | '-created' | 'id' | '-id' | 'status' | '-status' | 'updated' | '-updated'");
            }
            (0, apis_1.queryParamPreProcessor)(localVarQueryParameters);
            let config = {
                method: 'GET',
                url: localVarPath,
                headers: localVarHeaderParams,
                params: localVarQueryParameters,
            };
            this.session.applyToRequest(config);
            return (0, exponential_backoff_1.backOff)(() => {
                return new Promise((resolve, reject) => {
                    axios(config)
                        .then(axiosResponse => {
                        let body;
                        body = models_1.ObjectSerializer.deserialize(axiosResponse.data, "GetFlowActionResponseCollection");
                        resolve({ response: axiosResponse, body: body });
                    })
                        .catch(error => {
                        reject(error);
                    });
                });
            }, this.session.getRetryOptions());
        });
    }
    getFlowMessage(id, options = {}) {
        return __awaiter(this, void 0, void 0, function* () {
            const localVarPath = this.basePath + '/api/flow-messages/{id}/'
                .replace('{' + 'id' + '}', encodeURIComponent(String(id)));
            let localVarQueryParameters = {};
            let localVarHeaderParams = Object.assign({}, this._defaultHeaders);
            const produces = ['application/json'];
            if (produces.indexOf('application/json') >= 0) {
                localVarHeaderParams.Accept = 'application/json';
            }
            else {
                localVarHeaderParams.Accept = produces.join(',');
            }
            if (id === null || id === undefined) {
                throw new Error('Required parameter id was null or undefined when calling getFlowMessage.');
            }
            if (options.fieldsFlowAction !== undefined) {
                localVarQueryParameters['fields[flow-action]'] = models_1.ObjectSerializer.serialize(options.fieldsFlowAction, "Array<'action_type' | 'status' | 'created' | 'updated' | 'settings' | 'tracking_options' | 'send_options' | 'send_options.use_smart_sending' | 'send_options.is_transactional' | 'render_options' | 'render_options.shorten_links' | 'render_options.add_org_prefix' | 'render_options.add_info_link' | 'render_options.add_opt_out_language'>");
            }
            if (options.fieldsFlowMessage !== undefined) {
                localVarQueryParameters['fields[flow-message]'] = models_1.ObjectSerializer.serialize(options.fieldsFlowMessage, "Array<'name' | 'channel' | 'content' | 'created' | 'updated'>");
            }
            if (options.fieldsTemplate !== undefined) {
                localVarQueryParameters['fields[template]'] = models_1.ObjectSerializer.serialize(options.fieldsTemplate, "Array<'name' | 'editor_type' | 'html' | 'text' | 'created' | 'updated'>");
            }
            if (options.include !== undefined) {
                localVarQueryParameters['include'] = models_1.ObjectSerializer.serialize(options.include, "Array<'flow-action' | 'template'>");
            }
            (0, apis_1.queryParamPreProcessor)(localVarQueryParameters);
            let config = {
                method: 'GET',
                url: localVarPath,
                headers: localVarHeaderParams,
                params: localVarQueryParameters,
            };
            this.session.applyToRequest(config);
            return (0, exponential_backoff_1.backOff)(() => {
                return new Promise((resolve, reject) => {
                    axios(config)
                        .then(axiosResponse => {
                        let body;
                        body = models_1.ObjectSerializer.deserialize(axiosResponse.data, "GetFlowMessageResponseCompoundDocument");
                        resolve({ response: axiosResponse, body: body });
                    })
                        .catch(error => {
                        reject(error);
                    });
                });
            }, this.session.getRetryOptions());
        });
    }
    getFlowMessageAction(id, options = {}) {
        return __awaiter(this, void 0, void 0, function* () {
            const localVarPath = this.basePath + '/api/flow-messages/{id}/flow-action/'
                .replace('{' + 'id' + '}', encodeURIComponent(String(id)));
            let localVarQueryParameters = {};
            let localVarHeaderParams = Object.assign({}, this._defaultHeaders);
            const produces = ['application/json'];
            if (produces.indexOf('application/json') >= 0) {
                localVarHeaderParams.Accept = 'application/json';
            }
            else {
                localVarHeaderParams.Accept = produces.join(',');
            }
            if (id === null || id === undefined) {
                throw new Error('Required parameter id was null or undefined when calling getFlowMessageAction.');
            }
            if (options.fieldsFlowAction !== undefined) {
                localVarQueryParameters['fields[flow-action]'] = models_1.ObjectSerializer.serialize(options.fieldsFlowAction, "Array<'action_type' | 'status' | 'created' | 'updated' | 'settings' | 'tracking_options' | 'send_options' | 'send_options.use_smart_sending' | 'send_options.is_transactional' | 'render_options' | 'render_options.shorten_links' | 'render_options.add_org_prefix' | 'render_options.add_info_link' | 'render_options.add_opt_out_language'>");
            }
            (0, apis_1.queryParamPreProcessor)(localVarQueryParameters);
            let config = {
                method: 'GET',
                url: localVarPath,
                headers: localVarHeaderParams,
                params: localVarQueryParameters,
            };
            this.session.applyToRequest(config);
            return (0, exponential_backoff_1.backOff)(() => {
                return new Promise((resolve, reject) => {
                    axios(config)
                        .then(axiosResponse => {
                        let body;
                        body = models_1.ObjectSerializer.deserialize(axiosResponse.data, "GetFlowActionResponse");
                        resolve({ response: axiosResponse, body: body });
                    })
                        .catch(error => {
                        reject(error);
                    });
                });
            }, this.session.getRetryOptions());
        });
    }
    getFlowMessageRelationshipsAction(id) {
        return __awaiter(this, void 0, void 0, function* () {
            const localVarPath = this.basePath + '/api/flow-messages/{id}/relationships/flow-action/'
                .replace('{' + 'id' + '}', encodeURIComponent(String(id)));
            let localVarQueryParameters = {};
            let localVarHeaderParams = Object.assign({}, this._defaultHeaders);
            const produces = ['application/json'];
            if (produces.indexOf('application/json') >= 0) {
                localVarHeaderParams.Accept = 'application/json';
            }
            else {
                localVarHeaderParams.Accept = produces.join(',');
            }
            if (id === null || id === undefined) {
                throw new Error('Required parameter id was null or undefined when calling getFlowMessageRelationshipsAction.');
            }
            (0, apis_1.queryParamPreProcessor)(localVarQueryParameters);
            let config = {
                method: 'GET',
                url: localVarPath,
                headers: localVarHeaderParams,
                params: localVarQueryParameters,
            };
            this.session.applyToRequest(config);
            return (0, exponential_backoff_1.backOff)(() => {
                return new Promise((resolve, reject) => {
                    axios(config)
                        .then(axiosResponse => {
                        let body;
                        body = models_1.ObjectSerializer.deserialize(axiosResponse.data, "GetFlowMessageFlowActionRelationshipResponse");
                        resolve({ response: axiosResponse, body: body });
                    })
                        .catch(error => {
                        reject(error);
                    });
                });
            }, this.session.getRetryOptions());
        });
    }
    getFlowMessageRelationshipsTemplate(id) {
        return __awaiter(this, void 0, void 0, function* () {
            const localVarPath = this.basePath + '/api/flow-messages/{id}/relationships/template/'
                .replace('{' + 'id' + '}', encodeURIComponent(String(id)));
            let localVarQueryParameters = {};
            let localVarHeaderParams = Object.assign({}, this._defaultHeaders);
            const produces = ['application/json'];
            if (produces.indexOf('application/json') >= 0) {
                localVarHeaderParams.Accept = 'application/json';
            }
            else {
                localVarHeaderParams.Accept = produces.join(',');
            }
            if (id === null || id === undefined) {
                throw new Error('Required parameter id was null or undefined when calling getFlowMessageRelationshipsTemplate.');
            }
            (0, apis_1.queryParamPreProcessor)(localVarQueryParameters);
            let config = {
                method: 'GET',
                url: localVarPath,
                headers: localVarHeaderParams,
                params: localVarQueryParameters,
            };
            this.session.applyToRequest(config);
            return (0, exponential_backoff_1.backOff)(() => {
                return new Promise((resolve, reject) => {
                    axios(config)
                        .then(axiosResponse => {
                        let body;
                        body = models_1.ObjectSerializer.deserialize(axiosResponse.data, "GetFlowMessageTemplateRelationshipResponse");
                        resolve({ response: axiosResponse, body: body });
                    })
                        .catch(error => {
                        reject(error);
                    });
                });
            }, this.session.getRetryOptions());
        });
    }
    getFlowMessageTemplate(id, options = {}) {
        return __awaiter(this, void 0, void 0, function* () {
            const localVarPath = this.basePath + '/api/flow-messages/{id}/template/'
                .replace('{' + 'id' + '}', encodeURIComponent(String(id)));
            let localVarQueryParameters = {};
            let localVarHeaderParams = Object.assign({}, this._defaultHeaders);
            const produces = ['application/json'];
            if (produces.indexOf('application/json') >= 0) {
                localVarHeaderParams.Accept = 'application/json';
            }
            else {
                localVarHeaderParams.Accept = produces.join(',');
            }
            if (id === null || id === undefined) {
                throw new Error('Required parameter id was null or undefined when calling getFlowMessageTemplate.');
            }
            if (options.fieldsTemplate !== undefined) {
                localVarQueryParameters['fields[template]'] = models_1.ObjectSerializer.serialize(options.fieldsTemplate, "Array<'name' | 'editor_type' | 'html' | 'text' | 'created' | 'updated'>");
            }
            (0, apis_1.queryParamPreProcessor)(localVarQueryParameters);
            let config = {
                method: 'GET',
                url: localVarPath,
                headers: localVarHeaderParams,
                params: localVarQueryParameters,
            };
            this.session.applyToRequest(config);
            return (0, exponential_backoff_1.backOff)(() => {
                return new Promise((resolve, reject) => {
                    axios(config)
                        .then(axiosResponse => {
                        let body;
                        body = models_1.ObjectSerializer.deserialize(axiosResponse.data, "GetTemplateResponse");
                        resolve({ response: axiosResponse, body: body });
                    })
                        .catch(error => {
                        reject(error);
                    });
                });
            }, this.session.getRetryOptions());
        });
    }
    getFlowRelationshipsFlowActions(id, options = {}) {
        return __awaiter(this, void 0, void 0, function* () {
            const localVarPath = this.basePath + '/api/flows/{id}/relationships/flow-actions/'
                .replace('{' + 'id' + '}', encodeURIComponent(String(id)));
            let localVarQueryParameters = {};
            let localVarHeaderParams = Object.assign({}, this._defaultHeaders);
            const produces = ['application/json'];
            if (produces.indexOf('application/json') >= 0) {
                localVarHeaderParams.Accept = 'application/json';
            }
            else {
                localVarHeaderParams.Accept = produces.join(',');
            }
            if (id === null || id === undefined) {
                throw new Error('Required parameter id was null or undefined when calling getFlowRelationshipsFlowActions.');
            }
            if (options.filter !== undefined) {
                localVarQueryParameters['filter'] = models_1.ObjectSerializer.serialize(options.filter, "string");
            }
            if (options.pageSize !== undefined) {
                localVarQueryParameters['page[size]'] = models_1.ObjectSerializer.serialize(options.pageSize, "number");
            }
            if (options.sort !== undefined) {
                localVarQueryParameters['sort'] = models_1.ObjectSerializer.serialize(options.sort, "'created' | '-created' | 'id' | '-id' | 'status' | '-status' | 'updated' | '-updated'");
            }
            (0, apis_1.queryParamPreProcessor)(localVarQueryParameters);
            let config = {
                method: 'GET',
                url: localVarPath,
                headers: localVarHeaderParams,
                params: localVarQueryParameters,
            };
            this.session.applyToRequest(config);
            return (0, exponential_backoff_1.backOff)(() => {
                return new Promise((resolve, reject) => {
                    axios(config)
                        .then(axiosResponse => {
                        let body;
                        body = models_1.ObjectSerializer.deserialize(axiosResponse.data, "GetFlowFlowActionRelationshipListResponseCollection");
                        resolve({ response: axiosResponse, body: body });
                    })
                        .catch(error => {
                        reject(error);
                    });
                });
            }, this.session.getRetryOptions());
        });
    }
    getFlowRelationshipsTags(id) {
        return __awaiter(this, void 0, void 0, function* () {
            const localVarPath = this.basePath + '/api/flows/{id}/relationships/tags/'
                .replace('{' + 'id' + '}', encodeURIComponent(String(id)));
            let localVarQueryParameters = {};
            let localVarHeaderParams = Object.assign({}, this._defaultHeaders);
            const produces = ['application/json'];
            if (produces.indexOf('application/json') >= 0) {
                localVarHeaderParams.Accept = 'application/json';
            }
            else {
                localVarHeaderParams.Accept = produces.join(',');
            }
            if (id === null || id === undefined) {
                throw new Error('Required parameter id was null or undefined when calling getFlowRelationshipsTags.');
            }
            (0, apis_1.queryParamPreProcessor)(localVarQueryParameters);
            let config = {
                method: 'GET',
                url: localVarPath,
                headers: localVarHeaderParams,
                params: localVarQueryParameters,
            };
            this.session.applyToRequest(config);
            return (0, exponential_backoff_1.backOff)(() => {
                return new Promise((resolve, reject) => {
                    axios(config)
                        .then(axiosResponse => {
                        let body;
                        body = models_1.ObjectSerializer.deserialize(axiosResponse.data, "GetFlowTagRelationshipListResponseCollection");
                        resolve({ response: axiosResponse, body: body });
                    })
                        .catch(error => {
                        reject(error);
                    });
                });
            }, this.session.getRetryOptions());
        });
    }
    getFlowTags(id, options = {}) {
        return __awaiter(this, void 0, void 0, function* () {
            const localVarPath = this.basePath + '/api/flows/{id}/tags/'
                .replace('{' + 'id' + '}', encodeURIComponent(String(id)));
            let localVarQueryParameters = {};
            let localVarHeaderParams = Object.assign({}, this._defaultHeaders);
            const produces = ['application/json'];
            if (produces.indexOf('application/json') >= 0) {
                localVarHeaderParams.Accept = 'application/json';
            }
            else {
                localVarHeaderParams.Accept = produces.join(',');
            }
            if (id === null || id === undefined) {
                throw new Error('Required parameter id was null or undefined when calling getFlowTags.');
            }
            if (options.fieldsTag !== undefined) {
                localVarQueryParameters['fields[tag]'] = models_1.ObjectSerializer.serialize(options.fieldsTag, "Array<'name'>");
            }
            (0, apis_1.queryParamPreProcessor)(localVarQueryParameters);
            let config = {
                method: 'GET',
                url: localVarPath,
                headers: localVarHeaderParams,
                params: localVarQueryParameters,
            };
            this.session.applyToRequest(config);
            return (0, exponential_backoff_1.backOff)(() => {
                return new Promise((resolve, reject) => {
                    axios(config)
                        .then(axiosResponse => {
                        let body;
                        body = models_1.ObjectSerializer.deserialize(axiosResponse.data, "GetTagResponseCollection");
                        resolve({ response: axiosResponse, body: body });
                    })
                        .catch(error => {
                        reject(error);
                    });
                });
            }, this.session.getRetryOptions());
        });
    }
    getFlows(options = {}) {
        return __awaiter(this, void 0, void 0, function* () {
            const localVarPath = this.basePath + '/api/flows/';
            let localVarQueryParameters = {};
            let localVarHeaderParams = Object.assign({}, this._defaultHeaders);
            const produces = ['application/json'];
            if (produces.indexOf('application/json') >= 0) {
                localVarHeaderParams.Accept = 'application/json';
            }
            else {
                localVarHeaderParams.Accept = produces.join(',');
            }
            if (options.fieldsFlowAction !== undefined) {
                localVarQueryParameters['fields[flow-action]'] = models_1.ObjectSerializer.serialize(options.fieldsFlowAction, "Array<'action_type' | 'status' | 'created' | 'updated' | 'settings' | 'tracking_options' | 'send_options' | 'send_options.use_smart_sending' | 'send_options.is_transactional' | 'render_options' | 'render_options.shorten_links' | 'render_options.add_org_prefix' | 'render_options.add_info_link' | 'render_options.add_opt_out_language'>");
            }
            if (options.fieldsFlow !== undefined) {
                localVarQueryParameters['fields[flow]'] = models_1.ObjectSerializer.serialize(options.fieldsFlow, "Array<'name' | 'status' | 'archived' | 'created' | 'updated' | 'trigger_type'>");
            }
            if (options.fieldsTag !== undefined) {
                localVarQueryParameters['fields[tag]'] = models_1.ObjectSerializer.serialize(options.fieldsTag, "Array<'name'>");
            }
            if (options.filter !== undefined) {
                localVarQueryParameters['filter'] = models_1.ObjectSerializer.serialize(options.filter, "string");
            }
            if (options.include !== undefined) {
                localVarQueryParameters['include'] = models_1.ObjectSerializer.serialize(options.include, "Array<'flow-actions' | 'tags'>");
            }
            if (options.pageCursor !== undefined) {
                localVarQueryParameters['page[cursor]'] = models_1.ObjectSerializer.serialize(options.pageCursor, "string");
            }
            if (options.pageSize !== undefined) {
                localVarQueryParameters['page[size]'] = models_1.ObjectSerializer.serialize(options.pageSize, "number");
            }
            if (options.sort !== undefined) {
                localVarQueryParameters['sort'] = models_1.ObjectSerializer.serialize(options.sort, "'created' | '-created' | 'id' | '-id' | 'name' | '-name' | 'status' | '-status' | 'trigger_type' | '-trigger_type' | 'updated' | '-updated'");
            }
            (0, apis_1.queryParamPreProcessor)(localVarQueryParameters);
            let config = {
                method: 'GET',
                url: localVarPath,
                headers: localVarHeaderParams,
                params: localVarQueryParameters,
            };
            this.session.applyToRequest(config);
            return (0, exponential_backoff_1.backOff)(() => {
                return new Promise((resolve, reject) => {
                    axios(config)
                        .then(axiosResponse => {
                        let body;
                        body = models_1.ObjectSerializer.deserialize(axiosResponse.data, "GetFlowResponseCollectionCompoundDocument");
                        resolve({ response: axiosResponse, body: body });
                    })
                        .catch(error => {
                        reject(error);
                    });
                });
            }, this.session.getRetryOptions());
        });
    }
    updateFlow(id, flowUpdateQuery) {
        return __awaiter(this, void 0, void 0, function* () {
            const localVarPath = this.basePath + '/api/flows/{id}/'
                .replace('{' + 'id' + '}', encodeURIComponent(String(id)));
            let localVarQueryParameters = {};
            let localVarHeaderParams = Object.assign({}, this._defaultHeaders);
            const produces = ['application/json'];
            if (produces.indexOf('application/json') >= 0) {
                localVarHeaderParams.Accept = 'application/json';
            }
            else {
                localVarHeaderParams.Accept = produces.join(',');
            }
            if (id === null || id === undefined) {
                throw new Error('Required parameter id was null or undefined when calling updateFlow.');
            }
            if (flowUpdateQuery === null || flowUpdateQuery === undefined) {
                throw new Error('Required parameter flowUpdateQuery was null or undefined when calling updateFlow.');
            }
            (0, apis_1.queryParamPreProcessor)(localVarQueryParameters);
            let config = {
                method: 'PATCH',
                url: localVarPath,
                headers: localVarHeaderParams,
                params: localVarQueryParameters,
                data: models_1.ObjectSerializer.serialize(flowUpdateQuery, "FlowUpdateQuery")
            };
            this.session.applyToRequest(config);
            return (0, exponential_backoff_1.backOff)(() => {
                return new Promise((resolve, reject) => {
                    axios(config)
                        .then(axiosResponse => {
                        let body;
                        body = models_1.ObjectSerializer.deserialize(axiosResponse.data, "PatchFlowResponse");
                        resolve({ response: axiosResponse, body: body });
                    })
                        .catch(error => {
                        reject(error);
                    });
                });
            }, this.session.getRetryOptions());
        });
    }
}
exports.FlowsApi = FlowsApi;
//# sourceMappingURL=flowsApi.js.map