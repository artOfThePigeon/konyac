import { AxiosResponse } from "axios";
import { BackoffOptions } from 'exponential-backoff';
import { CatalogCategoryCreateJobCreateQuery } from '../model/catalogCategoryCreateJobCreateQuery';
import { CatalogCategoryCreateQuery } from '../model/catalogCategoryCreateQuery';
import { CatalogCategoryDeleteJobCreateQuery } from '../model/catalogCategoryDeleteJobCreateQuery';
import { CatalogCategoryItemOp } from '../model/catalogCategoryItemOp';
import { CatalogCategoryUpdateJobCreateQuery } from '../model/catalogCategoryUpdateJobCreateQuery';
import { CatalogCategoryUpdateQuery } from '../model/catalogCategoryUpdateQuery';
import { CatalogItemCategoryOp } from '../model/catalogItemCategoryOp';
import { CatalogItemCreateJobCreateQuery } from '../model/catalogItemCreateJobCreateQuery';
import { CatalogItemCreateQuery } from '../model/catalogItemCreateQuery';
import { CatalogItemDeleteJobCreateQuery } from '../model/catalogItemDeleteJobCreateQuery';
import { CatalogItemUpdateJobCreateQuery } from '../model/catalogItemUpdateJobCreateQuery';
import { CatalogItemUpdateQuery } from '../model/catalogItemUpdateQuery';
import { CatalogVariantCreateJobCreateQuery } from '../model/catalogVariantCreateJobCreateQuery';
import { CatalogVariantCreateQuery } from '../model/catalogVariantCreateQuery';
import { CatalogVariantDeleteJobCreateQuery } from '../model/catalogVariantDeleteJobCreateQuery';
import { CatalogVariantUpdateJobCreateQuery } from '../model/catalogVariantUpdateJobCreateQuery';
import { CatalogVariantUpdateQuery } from '../model/catalogVariantUpdateQuery';
import { GetCatalogCategoryCreateJobResponseCollectionCompoundDocument } from '../model/getCatalogCategoryCreateJobResponseCollectionCompoundDocument';
import { GetCatalogCategoryCreateJobResponseCompoundDocument } from '../model/getCatalogCategoryCreateJobResponseCompoundDocument';
import { GetCatalogCategoryDeleteJobResponse } from '../model/getCatalogCategoryDeleteJobResponse';
import { GetCatalogCategoryDeleteJobResponseCollection } from '../model/getCatalogCategoryDeleteJobResponseCollection';
import { GetCatalogCategoryItemListResponseCollection } from '../model/getCatalogCategoryItemListResponseCollection';
import { GetCatalogCategoryResponse } from '../model/getCatalogCategoryResponse';
import { GetCatalogCategoryResponseCollection } from '../model/getCatalogCategoryResponseCollection';
import { GetCatalogCategoryUpdateJobResponseCollectionCompoundDocument } from '../model/getCatalogCategoryUpdateJobResponseCollectionCompoundDocument';
import { GetCatalogCategoryUpdateJobResponseCompoundDocument } from '../model/getCatalogCategoryUpdateJobResponseCompoundDocument';
import { GetCatalogItemCategoryListResponseCollection } from '../model/getCatalogItemCategoryListResponseCollection';
import { GetCatalogItemCreateJobResponseCollectionCompoundDocument } from '../model/getCatalogItemCreateJobResponseCollectionCompoundDocument';
import { GetCatalogItemCreateJobResponseCompoundDocument } from '../model/getCatalogItemCreateJobResponseCompoundDocument';
import { GetCatalogItemDeleteJobResponse } from '../model/getCatalogItemDeleteJobResponse';
import { GetCatalogItemDeleteJobResponseCollection } from '../model/getCatalogItemDeleteJobResponseCollection';
import { GetCatalogItemResponseCollectionCompoundDocument } from '../model/getCatalogItemResponseCollectionCompoundDocument';
import { GetCatalogItemResponseCompoundDocument } from '../model/getCatalogItemResponseCompoundDocument';
import { GetCatalogItemUpdateJobResponseCollectionCompoundDocument } from '../model/getCatalogItemUpdateJobResponseCollectionCompoundDocument';
import { GetCatalogItemUpdateJobResponseCompoundDocument } from '../model/getCatalogItemUpdateJobResponseCompoundDocument';
import { GetCatalogVariantCreateJobResponseCollectionCompoundDocument } from '../model/getCatalogVariantCreateJobResponseCollectionCompoundDocument';
import { GetCatalogVariantCreateJobResponseCompoundDocument } from '../model/getCatalogVariantCreateJobResponseCompoundDocument';
import { GetCatalogVariantDeleteJobResponse } from '../model/getCatalogVariantDeleteJobResponse';
import { GetCatalogVariantDeleteJobResponseCollection } from '../model/getCatalogVariantDeleteJobResponseCollection';
import { GetCatalogVariantResponse } from '../model/getCatalogVariantResponse';
import { GetCatalogVariantResponseCollection } from '../model/getCatalogVariantResponseCollection';
import { GetCatalogVariantUpdateJobResponseCollectionCompoundDocument } from '../model/getCatalogVariantUpdateJobResponseCollectionCompoundDocument';
import { GetCatalogVariantUpdateJobResponseCompoundDocument } from '../model/getCatalogVariantUpdateJobResponseCompoundDocument';
import { PatchCatalogCategoryResponse } from '../model/patchCatalogCategoryResponse';
import { PatchCatalogItemResponse } from '../model/patchCatalogItemResponse';
import { PatchCatalogVariantResponse } from '../model/patchCatalogVariantResponse';
import { PostCatalogCategoryCreateJobResponse } from '../model/postCatalogCategoryCreateJobResponse';
import { PostCatalogCategoryDeleteJobResponse } from '../model/postCatalogCategoryDeleteJobResponse';
import { PostCatalogCategoryResponse } from '../model/postCatalogCategoryResponse';
import { PostCatalogCategoryUpdateJobResponse } from '../model/postCatalogCategoryUpdateJobResponse';
import { PostCatalogItemCreateJobResponse } from '../model/postCatalogItemCreateJobResponse';
import { PostCatalogItemDeleteJobResponse } from '../model/postCatalogItemDeleteJobResponse';
import { PostCatalogItemResponse } from '../model/postCatalogItemResponse';
import { PostCatalogItemUpdateJobResponse } from '../model/postCatalogItemUpdateJobResponse';
import { PostCatalogVariantCreateJobResponse } from '../model/postCatalogVariantCreateJobResponse';
import { PostCatalogVariantDeleteJobResponse } from '../model/postCatalogVariantDeleteJobResponse';
import { PostCatalogVariantResponse } from '../model/postCatalogVariantResponse';
import { PostCatalogVariantUpdateJobResponse } from '../model/postCatalogVariantUpdateJobResponse';
import { ServerBISSubscriptionCreateQuery } from '../model/serverBISSubscriptionCreateQuery';
import { Session } from './apis';
export declare class CatalogsApi {
    protected backoffOptions: BackoffOptions;
    session: Session;
    protected _basePath: string;
    protected _defaultHeaders: any;
    protected _useQuerystring: boolean;
    constructor(session: Session);
    set useQuerystring(value: boolean);
    set basePath(basePath: string);
    set defaultHeaders(defaultHeaders: any);
    get defaultHeaders(): any;
    get basePath(): string;
    createBackInStockSubscription(serverBISSubscriptionCreateQuery: ServerBISSubscriptionCreateQuery): Promise<{
        response: AxiosResponse;
        body?: any;
    }>;
    createCatalogCategory(catalogCategoryCreateQuery: CatalogCategoryCreateQuery): Promise<{
        response: AxiosResponse;
        body: PostCatalogCategoryResponse;
    }>;
    createCatalogCategoryRelationshipsItems(id: string, catalogCategoryItemOp: CatalogCategoryItemOp): Promise<{
        response: AxiosResponse;
        body?: any;
    }>;
    createCatalogItem(catalogItemCreateQuery: CatalogItemCreateQuery): Promise<{
        response: AxiosResponse;
        body: PostCatalogItemResponse;
    }>;
    createCatalogItemRelationshipsCategories(id: string, catalogItemCategoryOp: CatalogItemCategoryOp): Promise<{
        response: AxiosResponse;
        body?: any;
    }>;
    createCatalogVariant(catalogVariantCreateQuery: CatalogVariantCreateQuery): Promise<{
        response: AxiosResponse;
        body: PostCatalogVariantResponse;
    }>;
    deleteCatalogCategory(id: string): Promise<{
        response: AxiosResponse;
        body?: any;
    }>;
    deleteCatalogCategoryRelationshipsItems(id: string, catalogCategoryItemOp: CatalogCategoryItemOp): Promise<{
        response: AxiosResponse;
        body?: any;
    }>;
    deleteCatalogItem(id: string): Promise<{
        response: AxiosResponse;
        body?: any;
    }>;
    deleteCatalogItemRelationshipsCategories(id: string, catalogItemCategoryOp: CatalogItemCategoryOp): Promise<{
        response: AxiosResponse;
        body?: any;
    }>;
    deleteCatalogVariant(id: string): Promise<{
        response: AxiosResponse;
        body?: any;
    }>;
    getCatalogCategories(options?: {
        fieldsCatalogCategory?: Array<'external_id' | 'name' | 'updated'>;
        filter?: string;
        pageCursor?: string;
        sort?: 'created' | '-created';
    }): Promise<{
        response: AxiosResponse;
        body: GetCatalogCategoryResponseCollection;
    }>;
    getCatalogCategory(id: string, options?: {
        fieldsCatalogCategory?: Array<'external_id' | 'name' | 'updated'>;
    }): Promise<{
        response: AxiosResponse;
        body: GetCatalogCategoryResponse;
    }>;
    getCatalogCategoryItems(id: string, options?: {
        fieldsCatalogItem?: Array<'external_id' | 'title' | 'description' | 'price' | 'url' | 'image_full_url' | 'image_thumbnail_url' | 'images' | 'custom_metadata' | 'published' | 'created' | 'updated'>;
        fieldsCatalogVariant?: Array<'external_id' | 'title' | 'description' | 'sku' | 'inventory_policy' | 'inventory_quantity' | 'price' | 'url' | 'image_full_url' | 'image_thumbnail_url' | 'images' | 'custom_metadata' | 'published' | 'created' | 'updated'>;
        filter?: string;
        include?: Array<'variants'>;
        pageCursor?: string;
        sort?: 'created' | '-created';
    }): Promise<{
        response: AxiosResponse;
        body: GetCatalogItemResponseCollectionCompoundDocument;
    }>;
    getCatalogCategoryRelationshipsItems(id: string, options?: {
        pageCursor?: string;
    }): Promise<{
        response: AxiosResponse;
        body: GetCatalogCategoryItemListResponseCollection;
    }>;
    getCatalogItem(id: string, options?: {
        fieldsCatalogItem?: Array<'external_id' | 'title' | 'description' | 'price' | 'url' | 'image_full_url' | 'image_thumbnail_url' | 'images' | 'custom_metadata' | 'published' | 'created' | 'updated'>;
        fieldsCatalogVariant?: Array<'external_id' | 'title' | 'description' | 'sku' | 'inventory_policy' | 'inventory_quantity' | 'price' | 'url' | 'image_full_url' | 'image_thumbnail_url' | 'images' | 'custom_metadata' | 'published' | 'created' | 'updated'>;
        include?: Array<'variants'>;
    }): Promise<{
        response: AxiosResponse;
        body: GetCatalogItemResponseCompoundDocument;
    }>;
    getCatalogItemCategories(id: string, options?: {
        fieldsCatalogCategory?: Array<'external_id' | 'name' | 'updated'>;
        filter?: string;
        pageCursor?: string;
        sort?: 'created' | '-created';
    }): Promise<{
        response: AxiosResponse;
        body: GetCatalogCategoryResponseCollection;
    }>;
    getCatalogItemRelationshipsCategories(id: string, options?: {
        pageCursor?: string;
    }): Promise<{
        response: AxiosResponse;
        body: GetCatalogItemCategoryListResponseCollection;
    }>;
    getCatalogItemVariants(id: string, options?: {
        fieldsCatalogVariant?: Array<'external_id' | 'title' | 'description' | 'sku' | 'inventory_policy' | 'inventory_quantity' | 'price' | 'url' | 'image_full_url' | 'image_thumbnail_url' | 'images' | 'custom_metadata' | 'published' | 'created' | 'updated'>;
        filter?: string;
        pageCursor?: string;
        sort?: 'created' | '-created';
    }): Promise<{
        response: AxiosResponse;
        body: GetCatalogVariantResponseCollection;
    }>;
    getCatalogItems(options?: {
        fieldsCatalogItem?: Array<'external_id' | 'title' | 'description' | 'price' | 'url' | 'image_full_url' | 'image_thumbnail_url' | 'images' | 'custom_metadata' | 'published' | 'created' | 'updated'>;
        fieldsCatalogVariant?: Array<'external_id' | 'title' | 'description' | 'sku' | 'inventory_policy' | 'inventory_quantity' | 'price' | 'url' | 'image_full_url' | 'image_thumbnail_url' | 'images' | 'custom_metadata' | 'published' | 'created' | 'updated'>;
        filter?: string;
        include?: Array<'variants'>;
        pageCursor?: string;
        sort?: 'created' | '-created';
    }): Promise<{
        response: AxiosResponse;
        body: GetCatalogItemResponseCollectionCompoundDocument;
    }>;
    getCatalogVariant(id: string, options?: {
        fieldsCatalogVariant?: Array<'external_id' | 'title' | 'description' | 'sku' | 'inventory_policy' | 'inventory_quantity' | 'price' | 'url' | 'image_full_url' | 'image_thumbnail_url' | 'images' | 'custom_metadata' | 'published' | 'created' | 'updated'>;
    }): Promise<{
        response: AxiosResponse;
        body: GetCatalogVariantResponse;
    }>;
    getCatalogVariants(options?: {
        fieldsCatalogVariant?: Array<'external_id' | 'title' | 'description' | 'sku' | 'inventory_policy' | 'inventory_quantity' | 'price' | 'url' | 'image_full_url' | 'image_thumbnail_url' | 'images' | 'custom_metadata' | 'published' | 'created' | 'updated'>;
        filter?: string;
        pageCursor?: string;
        sort?: 'created' | '-created';
    }): Promise<{
        response: AxiosResponse;
        body: GetCatalogVariantResponseCollection;
    }>;
    getCreateCategoriesJob(jobId: string, options?: {
        fieldsCatalogCategoryBulkCreateJob?: Array<'job_id' | 'status' | 'created_at' | 'total_count' | 'completed_count' | 'failed_count' | 'completed_at' | 'errors' | 'expires_at'>;
        fieldsCatalogCategory?: Array<'external_id' | 'name' | 'updated'>;
        include?: Array<'categories'>;
    }): Promise<{
        response: AxiosResponse;
        body: GetCatalogCategoryCreateJobResponseCompoundDocument;
    }>;
    getCreateCategoriesJobs(options?: {
        fieldsCatalogCategoryBulkCreateJob?: Array<'job_id' | 'status' | 'created_at' | 'total_count' | 'completed_count' | 'failed_count' | 'completed_at' | 'errors' | 'expires_at'>;
        filter?: string;
        pageCursor?: string;
    }): Promise<{
        response: AxiosResponse;
        body: GetCatalogCategoryCreateJobResponseCollectionCompoundDocument;
    }>;
    getCreateItemsJob(jobId: string, options?: {
        fieldsCatalogItemBulkCreateJob?: Array<'job_id' | 'status' | 'created_at' | 'total_count' | 'completed_count' | 'failed_count' | 'completed_at' | 'errors' | 'expires_at'>;
        fieldsCatalogItem?: Array<'external_id' | 'title' | 'description' | 'price' | 'url' | 'image_full_url' | 'image_thumbnail_url' | 'images' | 'custom_metadata' | 'published' | 'created' | 'updated'>;
        include?: Array<'items'>;
    }): Promise<{
        response: AxiosResponse;
        body: GetCatalogItemCreateJobResponseCompoundDocument;
    }>;
    getCreateItemsJobs(options?: {
        fieldsCatalogItemBulkCreateJob?: Array<'job_id' | 'status' | 'created_at' | 'total_count' | 'completed_count' | 'failed_count' | 'completed_at' | 'errors' | 'expires_at'>;
        filter?: string;
        pageCursor?: string;
    }): Promise<{
        response: AxiosResponse;
        body: GetCatalogItemCreateJobResponseCollectionCompoundDocument;
    }>;
    getCreateVariantsJob(jobId: string, options?: {
        fieldsCatalogVariantBulkCreateJob?: Array<'job_id' | 'status' | 'created_at' | 'total_count' | 'completed_count' | 'failed_count' | 'completed_at' | 'errors' | 'expires_at'>;
        fieldsCatalogVariant?: Array<'external_id' | 'title' | 'description' | 'sku' | 'inventory_policy' | 'inventory_quantity' | 'price' | 'url' | 'image_full_url' | 'image_thumbnail_url' | 'images' | 'custom_metadata' | 'published' | 'created' | 'updated'>;
        include?: Array<'variants'>;
    }): Promise<{
        response: AxiosResponse;
        body: GetCatalogVariantCreateJobResponseCompoundDocument;
    }>;
    getCreateVariantsJobs(options?: {
        fieldsCatalogVariantBulkCreateJob?: Array<'job_id' | 'status' | 'created_at' | 'total_count' | 'completed_count' | 'failed_count' | 'completed_at' | 'errors' | 'expires_at'>;
        filter?: string;
        pageCursor?: string;
    }): Promise<{
        response: AxiosResponse;
        body: GetCatalogVariantCreateJobResponseCollectionCompoundDocument;
    }>;
    getDeleteCategoriesJob(jobId: string, options?: {
        fieldsCatalogCategoryBulkDeleteJob?: Array<'job_id' | 'status' | 'created_at' | 'total_count' | 'completed_count' | 'failed_count' | 'completed_at' | 'errors' | 'expires_at'>;
    }): Promise<{
        response: AxiosResponse;
        body: GetCatalogCategoryDeleteJobResponse;
    }>;
    getDeleteCategoriesJobs(options?: {
        fieldsCatalogCategoryBulkDeleteJob?: Array<'job_id' | 'status' | 'created_at' | 'total_count' | 'completed_count' | 'failed_count' | 'completed_at' | 'errors' | 'expires_at'>;
        filter?: string;
        pageCursor?: string;
    }): Promise<{
        response: AxiosResponse;
        body: GetCatalogCategoryDeleteJobResponseCollection;
    }>;
    getDeleteItemsJob(jobId: string, options?: {
        fieldsCatalogItemBulkDeleteJob?: Array<'job_id' | 'status' | 'created_at' | 'total_count' | 'completed_count' | 'failed_count' | 'completed_at' | 'errors' | 'expires_at'>;
    }): Promise<{
        response: AxiosResponse;
        body: GetCatalogItemDeleteJobResponse;
    }>;
    getDeleteItemsJobs(options?: {
        fieldsCatalogItemBulkDeleteJob?: Array<'job_id' | 'status' | 'created_at' | 'total_count' | 'completed_count' | 'failed_count' | 'completed_at' | 'errors' | 'expires_at'>;
        filter?: string;
        pageCursor?: string;
    }): Promise<{
        response: AxiosResponse;
        body: GetCatalogItemDeleteJobResponseCollection;
    }>;
    getDeleteVariantsJob(jobId: string, options?: {
        fieldsCatalogVariantBulkDeleteJob?: Array<'job_id' | 'status' | 'created_at' | 'total_count' | 'completed_count' | 'failed_count' | 'completed_at' | 'errors' | 'expires_at'>;
    }): Promise<{
        response: AxiosResponse;
        body: GetCatalogVariantDeleteJobResponse;
    }>;
    getDeleteVariantsJobs(options?: {
        fieldsCatalogVariantBulkDeleteJob?: Array<'job_id' | 'status' | 'created_at' | 'total_count' | 'completed_count' | 'failed_count' | 'completed_at' | 'errors' | 'expires_at'>;
        filter?: string;
        pageCursor?: string;
    }): Promise<{
        response: AxiosResponse;
        body: GetCatalogVariantDeleteJobResponseCollection;
    }>;
    getUpdateCategoriesJob(jobId: string, options?: {
        fieldsCatalogCategoryBulkUpdateJob?: Array<'job_id' | 'status' | 'created_at' | 'total_count' | 'completed_count' | 'failed_count' | 'completed_at' | 'errors' | 'expires_at'>;
        fieldsCatalogCategory?: Array<'external_id' | 'name' | 'updated'>;
        include?: Array<'categories'>;
    }): Promise<{
        response: AxiosResponse;
        body: GetCatalogCategoryUpdateJobResponseCompoundDocument;
    }>;
    getUpdateCategoriesJobs(options?: {
        fieldsCatalogCategoryBulkUpdateJob?: Array<'job_id' | 'status' | 'created_at' | 'total_count' | 'completed_count' | 'failed_count' | 'completed_at' | 'errors' | 'expires_at'>;
        filter?: string;
        pageCursor?: string;
    }): Promise<{
        response: AxiosResponse;
        body: GetCatalogCategoryUpdateJobResponseCollectionCompoundDocument;
    }>;
    getUpdateItemsJob(jobId: string, options?: {
        fieldsCatalogItemBulkUpdateJob?: Array<'job_id' | 'status' | 'created_at' | 'total_count' | 'completed_count' | 'failed_count' | 'completed_at' | 'errors' | 'expires_at'>;
        fieldsCatalogItem?: Array<'external_id' | 'title' | 'description' | 'price' | 'url' | 'image_full_url' | 'image_thumbnail_url' | 'images' | 'custom_metadata' | 'published' | 'created' | 'updated'>;
        include?: Array<'items'>;
    }): Promise<{
        response: AxiosResponse;
        body: GetCatalogItemUpdateJobResponseCompoundDocument;
    }>;
    getUpdateItemsJobs(options?: {
        fieldsCatalogItemBulkUpdateJob?: Array<'job_id' | 'status' | 'created_at' | 'total_count' | 'completed_count' | 'failed_count' | 'completed_at' | 'errors' | 'expires_at'>;
        filter?: string;
        pageCursor?: string;
    }): Promise<{
        response: AxiosResponse;
        body: GetCatalogItemUpdateJobResponseCollectionCompoundDocument;
    }>;
    getUpdateVariantsJob(jobId: string, options?: {
        fieldsCatalogVariantBulkUpdateJob?: Array<'job_id' | 'status' | 'created_at' | 'total_count' | 'completed_count' | 'failed_count' | 'completed_at' | 'errors' | 'expires_at'>;
        fieldsCatalogVariant?: Array<'external_id' | 'title' | 'description' | 'sku' | 'inventory_policy' | 'inventory_quantity' | 'price' | 'url' | 'image_full_url' | 'image_thumbnail_url' | 'images' | 'custom_metadata' | 'published' | 'created' | 'updated'>;
        include?: Array<'variants'>;
    }): Promise<{
        response: AxiosResponse;
        body: GetCatalogVariantUpdateJobResponseCompoundDocument;
    }>;
    getUpdateVariantsJobs(options?: {
        fieldsCatalogVariantBulkUpdateJob?: Array<'job_id' | 'status' | 'created_at' | 'total_count' | 'completed_count' | 'failed_count' | 'completed_at' | 'errors' | 'expires_at'>;
        filter?: string;
        pageCursor?: string;
    }): Promise<{
        response: AxiosResponse;
        body: GetCatalogVariantUpdateJobResponseCollectionCompoundDocument;
    }>;
    spawnCreateCategoriesJob(catalogCategoryCreateJobCreateQuery: CatalogCategoryCreateJobCreateQuery): Promise<{
        response: AxiosResponse;
        body: PostCatalogCategoryCreateJobResponse;
    }>;
    spawnCreateItemsJob(catalogItemCreateJobCreateQuery: CatalogItemCreateJobCreateQuery): Promise<{
        response: AxiosResponse;
        body: PostCatalogItemCreateJobResponse;
    }>;
    spawnCreateVariantsJob(catalogVariantCreateJobCreateQuery: CatalogVariantCreateJobCreateQuery): Promise<{
        response: AxiosResponse;
        body: PostCatalogVariantCreateJobResponse;
    }>;
    spawnDeleteCategoriesJob(catalogCategoryDeleteJobCreateQuery: CatalogCategoryDeleteJobCreateQuery): Promise<{
        response: AxiosResponse;
        body: PostCatalogCategoryDeleteJobResponse;
    }>;
    spawnDeleteItemsJob(catalogItemDeleteJobCreateQuery: CatalogItemDeleteJobCreateQuery): Promise<{
        response: AxiosResponse;
        body: PostCatalogItemDeleteJobResponse;
    }>;
    spawnDeleteVariantsJob(catalogVariantDeleteJobCreateQuery: CatalogVariantDeleteJobCreateQuery): Promise<{
        response: AxiosResponse;
        body: PostCatalogVariantDeleteJobResponse;
    }>;
    spawnUpdateCategoriesJob(catalogCategoryUpdateJobCreateQuery: CatalogCategoryUpdateJobCreateQuery): Promise<{
        response: AxiosResponse;
        body: PostCatalogCategoryUpdateJobResponse;
    }>;
    spawnUpdateItemsJob(catalogItemUpdateJobCreateQuery: CatalogItemUpdateJobCreateQuery): Promise<{
        response: AxiosResponse;
        body: PostCatalogItemUpdateJobResponse;
    }>;
    spawnUpdateVariantsJob(catalogVariantUpdateJobCreateQuery: CatalogVariantUpdateJobCreateQuery): Promise<{
        response: AxiosResponse;
        body: PostCatalogVariantUpdateJobResponse;
    }>;
    updateCatalogCategory(id: string, catalogCategoryUpdateQuery: CatalogCategoryUpdateQuery): Promise<{
        response: AxiosResponse;
        body: PatchCatalogCategoryResponse;
    }>;
    updateCatalogCategoryRelationshipsItems(id: string, catalogCategoryItemOp: CatalogCategoryItemOp): Promise<{
        response: AxiosResponse;
        body?: any;
    }>;
    updateCatalogItem(id: string, catalogItemUpdateQuery: CatalogItemUpdateQuery): Promise<{
        response: AxiosResponse;
        body: PatchCatalogItemResponse;
    }>;
    updateCatalogItemRelationshipsCategories(id: string, catalogItemCategoryOp: CatalogItemCategoryOp): Promise<{
        response: AxiosResponse;
        body?: any;
    }>;
    updateCatalogVariant(id: string, catalogVariantUpdateQuery: CatalogVariantUpdateQuery): Promise<{
        response: AxiosResponse;
        body: PatchCatalogVariantResponse;
    }>;
}
