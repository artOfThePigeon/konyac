import { AxiosResponse } from "axios";
import { BackoffOptions } from 'exponential-backoff';
import { GetListListResponseCollectionCompoundDocument } from '../model/getListListResponseCollectionCompoundDocument';
import { GetListMemberResponseCollection } from '../model/getListMemberResponseCollection';
import { GetListRelationshipsResponseCollection } from '../model/getListRelationshipsResponseCollection';
import { GetListRetrieveResponseCompoundDocument } from '../model/getListRetrieveResponseCompoundDocument';
import { GetListTagRelationshipListResponseCollection } from '../model/getListTagRelationshipListResponseCollection';
import { GetTagResponseCollection } from '../model/getTagResponseCollection';
import { ListCreateQuery } from '../model/listCreateQuery';
import { ListMembersAddQuery } from '../model/listMembersAddQuery';
import { ListMembersDeleteQuery } from '../model/listMembersDeleteQuery';
import { ListPartialUpdateQuery } from '../model/listPartialUpdateQuery';
import { PatchListPartialUpdateResponse } from '../model/patchListPartialUpdateResponse';
import { PostListCreateResponse } from '../model/postListCreateResponse';
import { Session } from './apis';
export declare class ListsApi {
    protected backoffOptions: BackoffOptions;
    session: Session;
    protected _basePath: string;
    protected _defaultHeaders: any;
    protected _useQuerystring: boolean;
    constructor(session: Session);
    set useQuerystring(value: boolean);
    set basePath(basePath: string);
    set defaultHeaders(defaultHeaders: any);
    get defaultHeaders(): any;
    get basePath(): string;
    createList(listCreateQuery: ListCreateQuery): Promise<{
        response: AxiosResponse;
        body: PostListCreateResponse;
    }>;
    createListRelationships(id: string, listMembersAddQuery: ListMembersAddQuery): Promise<{
        response: AxiosResponse;
        body?: any;
    }>;
    deleteList(id: string): Promise<{
        response: AxiosResponse;
        body?: any;
    }>;
    deleteListRelationships(id: string, listMembersDeleteQuery: ListMembersDeleteQuery): Promise<{
        response: AxiosResponse;
        body?: any;
    }>;
    getList(id: string, options?: {
        additionalFieldsList?: Array<'profile_count'>;
        fieldsList?: Array<'name' | 'created' | 'updated' | 'profile_count'>;
        fieldsTag?: Array<'name'>;
        include?: Array<'tags'>;
    }): Promise<{
        response: AxiosResponse;
        body: GetListRetrieveResponseCompoundDocument;
    }>;
    getListProfiles(id: string, options?: {
        additionalFieldsProfile?: Array<'predictive_analytics'>;
        fieldsProfile?: Array<'email' | 'phone_number' | 'external_id' | 'first_name' | 'last_name' | 'organization' | 'title' | 'image' | 'created' | 'updated' | 'last_event_date' | 'location' | 'location.address1' | 'location.address2' | 'location.city' | 'location.country' | 'location.latitude' | 'location.longitude' | 'location.region' | 'location.zip' | 'location.timezone' | 'properties' | 'subscriptions' | 'subscriptions.email' | 'subscriptions.email.marketing' | 'subscriptions.email.marketing.consent' | 'subscriptions.email.marketing.timestamp' | 'subscriptions.email.marketing.method' | 'subscriptions.email.marketing.method_detail' | 'subscriptions.email.marketing.custom_method_detail' | 'subscriptions.email.marketing.double_optin' | 'subscriptions.email.marketing.suppressions' | 'subscriptions.email.marketing.list_suppressions' | 'subscriptions.sms' | 'subscriptions.sms.marketing' | 'subscriptions.sms.marketing.consent' | 'subscriptions.sms.marketing.timestamp' | 'subscriptions.sms.marketing.method' | 'subscriptions.sms.marketing.method_detail' | 'joined_group_at' | 'predictive_analytics' | 'predictive_analytics.historic_clv' | 'predictive_analytics.predicted_clv' | 'predictive_analytics.total_clv' | 'predictive_analytics.historic_number_of_orders' | 'predictive_analytics.predicted_number_of_orders' | 'predictive_analytics.average_days_between_orders' | 'predictive_analytics.average_order_value' | 'predictive_analytics.churn_probability' | 'predictive_analytics.expected_date_of_next_order'>;
        filter?: string;
        pageCursor?: string;
        pageSize?: number;
        sort?: 'joined_group_at' | '-joined_group_at';
    }): Promise<{
        response: AxiosResponse;
        body: GetListMemberResponseCollection;
    }>;
    getListRelationshipsProfiles(id: string, options?: {
        filter?: string;
        pageCursor?: string;
        pageSize?: number;
        sort?: 'joined_group_at' | '-joined_group_at';
    }): Promise<{
        response: AxiosResponse;
        body: GetListRelationshipsResponseCollection;
    }>;
    getListRelationshipsTags(id: string): Promise<{
        response: AxiosResponse;
        body: GetListTagRelationshipListResponseCollection;
    }>;
    getListTags(id: string, options?: {
        fieldsTag?: Array<'name'>;
    }): Promise<{
        response: AxiosResponse;
        body: GetTagResponseCollection;
    }>;
    getLists(options?: {
        fieldsList?: Array<'name' | 'created' | 'updated'>;
        fieldsTag?: Array<'name'>;
        filter?: string;
        include?: Array<'tags'>;
        pageCursor?: string;
    }): Promise<{
        response: AxiosResponse;
        body: GetListListResponseCollectionCompoundDocument;
    }>;
    updateList(id: string, listPartialUpdateQuery: ListPartialUpdateQuery): Promise<{
        response: AxiosResponse;
        body: PatchListPartialUpdateResponse;
    }>;
}
