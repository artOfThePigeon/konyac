"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __exportStar = (this && this.__exportStar) || function(m, exports) {
    for (var p in m) if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports, p)) __createBinding(exports, m, p);
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.Klaviyo = exports.Auth = exports.Templates = exports.Tags = exports.Segments = exports.Profiles = exports.Metrics = exports.Lists = exports.Images = exports.Flows = exports.Events = exports.DataPrivacy = exports.Coupons = exports.Catalogs = exports.Campaigns = exports.Accounts = exports.ConfigWrapper = exports.GlobalApiKeySession = exports.ApiKeySession = exports.GlobalApiKeySettings = exports.queryParamPreProcessor = exports.RetryOptions = exports.KlaviyoApiKey = void 0;
__exportStar(require("./accountsApi"), exports);
const accountsApi_1 = require("./accountsApi");
__exportStar(require("./campaignsApi"), exports);
const campaignsApi_1 = require("./campaignsApi");
__exportStar(require("./catalogsApi"), exports);
const catalogsApi_1 = require("./catalogsApi");
__exportStar(require("./couponsApi"), exports);
const couponsApi_1 = require("./couponsApi");
__exportStar(require("./dataPrivacyApi"), exports);
const dataPrivacyApi_1 = require("./dataPrivacyApi");
__exportStar(require("./eventsApi"), exports);
const eventsApi_1 = require("./eventsApi");
__exportStar(require("./flowsApi"), exports);
const flowsApi_1 = require("./flowsApi");
__exportStar(require("./imagesApi"), exports);
const imagesApi_1 = require("./imagesApi");
__exportStar(require("./listsApi"), exports);
const listsApi_1 = require("./listsApi");
__exportStar(require("./metricsApi"), exports);
const metricsApi_1 = require("./metricsApi");
__exportStar(require("./profilesApi"), exports);
const profilesApi_1 = require("./profilesApi");
__exportStar(require("./segmentsApi"), exports);
const segmentsApi_1 = require("./segmentsApi");
__exportStar(require("./tagsApi"), exports);
const tagsApi_1 = require("./tagsApi");
__exportStar(require("./templatesApi"), exports);
const templatesApi_1 = require("./templatesApi");
var KlaviyoApiKey;
(function (KlaviyoApiKey) {
    KlaviyoApiKey["KeyName"] = "Klaviyo-API-Key";
})(KlaviyoApiKey = exports.KlaviyoApiKey || (exports.KlaviyoApiKey = {}));
class RetryOptions {
    constructor(options = {}) {
        const RETRY_CODES = [429, 503, 504];
        let numOfAttempts = 3;
        let timeMultiple = 5;
        let startingDelay = 500;
        if (options['numOfAttempts']) {
            numOfAttempts = options['numOfAttempts'];
        }
        if (options['timeMultiple']) {
            startingDelay = options['startingDelay'];
        }
        if (options['numOfAttempts']) {
            startingDelay = options['startingDelay'];
        }
        this.options = {
            numOfAttempts,
            timeMultiple,
            startingDelay,
            retry: res => {
                return RETRY_CODES.includes(res.status);
            }
        };
    }
    get backOffOptions() {
        return this.options;
    }
    set backOffOptions(backoffOptions) {
        this.options = backoffOptions;
    }
}
exports.RetryOptions = RetryOptions;
function queryParamPreProcessor(queryParams) {
    if (queryParams['page[cursor]'] && queryParams['page[cursor]'].includes("https://")) {
        const params = new URLSearchParams(decodeURI(queryParams['page[cursor]'].split('?')[1]));
        queryParams['page[cursor]'] = params.get('page[cursor]');
    }
    for (const key in queryParams) {
        let value = queryParams[key];
        if (Array.isArray(value)) {
            queryParams[key] = value.join();
        }
    }
}
exports.queryParamPreProcessor = queryParamPreProcessor;
class GlobalApiKeySettings {
    constructor(apiKey, retryOptions) {
        GlobalApiKeySettings.apiKey = apiKey;
        if (retryOptions) {
            GlobalApiKeySettings.retryOptions = retryOptions;
        }
    }
}
exports.GlobalApiKeySettings = GlobalApiKeySettings;
GlobalApiKeySettings.retryOptions = new RetryOptions();
class ApiKeySession {
    constructor(apiKey, retryOptions) {
        this._apiKeyPrefix = "Klaviyo-API-Key";
        this.apiKey = apiKey;
        if (retryOptions) {
            this.retryOptions = retryOptions;
        }
        else {
            this.retryOptions = new RetryOptions();
        }
    }
    applyToRequest(requestOptions) {
        if (requestOptions && requestOptions.headers) {
            requestOptions.headers["Authorization"] = `${this._apiKeyPrefix} ${this.apiKey}`;
        }
    }
    getRetryOptions() {
        return this.retryOptions.options;
    }
}
exports.ApiKeySession = ApiKeySession;
class GlobalApiKeySession {
    constructor() {
        this._apiKeyPrefix = "Klaviyo-API-Key";
    }
    applyToRequest(requestOptions) {
        if (requestOptions && requestOptions.headers) {
            if (GlobalApiKeySettings.apiKey) {
                requestOptions.headers["Authorization"] = `${this._apiKeyPrefix} ${GlobalApiKeySettings.apiKey}`;
            }
            else {
                throw Error("No API Key set");
            }
        }
    }
    getRetryOptions() {
        return GlobalApiKeySettings.retryOptions.options;
    }
}
exports.GlobalApiKeySession = GlobalApiKeySession;
function ConfigWrapper(apiKey, opts = {}) {
    const retryOptions = new RetryOptions(opts);
    if (opts) {
        GlobalApiKeySettings.retryOptions = retryOptions;
    }
    GlobalApiKeySettings.apiKey = apiKey;
    return new ApiKeySession(apiKey, retryOptions);
}
exports.ConfigWrapper = ConfigWrapper;
exports.Accounts = new accountsApi_1.AccountsApi(new GlobalApiKeySession());
exports.Campaigns = new campaignsApi_1.CampaignsApi(new GlobalApiKeySession());
exports.Catalogs = new catalogsApi_1.CatalogsApi(new GlobalApiKeySession());
exports.Coupons = new couponsApi_1.CouponsApi(new GlobalApiKeySession());
exports.DataPrivacy = new dataPrivacyApi_1.DataPrivacyApi(new GlobalApiKeySession());
exports.Events = new eventsApi_1.EventsApi(new GlobalApiKeySession());
exports.Flows = new flowsApi_1.FlowsApi(new GlobalApiKeySession());
exports.Images = new imagesApi_1.ImagesApi(new GlobalApiKeySession());
exports.Lists = new listsApi_1.ListsApi(new GlobalApiKeySession());
exports.Metrics = new metricsApi_1.MetricsApi(new GlobalApiKeySession());
exports.Profiles = new profilesApi_1.ProfilesApi(new GlobalApiKeySession());
exports.Segments = new segmentsApi_1.SegmentsApi(new GlobalApiKeySession());
exports.Tags = new tagsApi_1.TagsApi(new GlobalApiKeySession());
exports.Templates = new templatesApi_1.TemplatesApi(new GlobalApiKeySession());
exports.Auth = { ApiKeySession, GlobalApiKeySession, GlobalApiKeySettings };
exports.Klaviyo = { Auth: exports.Auth, AccountsApi: accountsApi_1.AccountsApi, Accounts: exports.Accounts, CampaignsApi: campaignsApi_1.CampaignsApi, Campaigns: exports.Campaigns, CatalogsApi: catalogsApi_1.CatalogsApi, Catalogs: exports.Catalogs, CouponsApi: couponsApi_1.CouponsApi, Coupons: exports.Coupons, DataPrivacyApi: dataPrivacyApi_1.DataPrivacyApi, DataPrivacy: exports.DataPrivacy, EventsApi: eventsApi_1.EventsApi, Events: exports.Events, FlowsApi: flowsApi_1.FlowsApi, Flows: exports.Flows, ImagesApi: imagesApi_1.ImagesApi, Images: exports.Images, ListsApi: listsApi_1.ListsApi, Lists: exports.Lists, MetricsApi: metricsApi_1.MetricsApi, Metrics: exports.Metrics, ProfilesApi: profilesApi_1.ProfilesApi, Profiles: exports.Profiles, SegmentsApi: segmentsApi_1.SegmentsApi, Segments: exports.Segments, TagsApi: tagsApi_1.TagsApi, Tags: exports.Tags, TemplatesApi: templatesApi_1.TemplatesApi, Templates: exports.Templates };
//# sourceMappingURL=apis.js.map