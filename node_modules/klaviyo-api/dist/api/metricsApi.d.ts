import { AxiosResponse } from "axios";
import { BackoffOptions } from 'exponential-backoff';
import { GetMetricResponse } from '../model/getMetricResponse';
import { GetMetricResponseCollection } from '../model/getMetricResponseCollection';
import { MetricAggregateQuery } from '../model/metricAggregateQuery';
import { PostMetricAggregateResponse } from '../model/postMetricAggregateResponse';
import { Session } from './apis';
export declare class MetricsApi {
    protected backoffOptions: BackoffOptions;
    session: Session;
    protected _basePath: string;
    protected _defaultHeaders: any;
    protected _useQuerystring: boolean;
    constructor(session: Session);
    set useQuerystring(value: boolean);
    set basePath(basePath: string);
    set defaultHeaders(defaultHeaders: any);
    get defaultHeaders(): any;
    get basePath(): string;
    getMetric(id: string, options?: {
        fieldsMetric?: Array<'name' | 'created' | 'updated' | 'integration'>;
    }): Promise<{
        response: AxiosResponse;
        body: GetMetricResponse;
    }>;
    getMetrics(options?: {
        fieldsMetric?: Array<'name' | 'created' | 'updated' | 'integration'>;
        filter?: string;
        pageCursor?: string;
    }): Promise<{
        response: AxiosResponse;
        body: GetMetricResponseCollection;
    }>;
    queryMetricAggregates(metricAggregateQuery: MetricAggregateQuery): Promise<{
        response: AxiosResponse;
        body: PostMetricAggregateResponse;
    }>;
}
