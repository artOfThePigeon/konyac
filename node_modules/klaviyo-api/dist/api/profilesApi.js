"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.ProfilesApi = void 0;
const axios = require('axios');
const exponential_backoff_1 = require("exponential-backoff");
const models_1 = require("../model/models");
const apis_1 = require("./apis");
let defaultBasePath = 'https://a.klaviyo.com';
class ProfilesApi {
    constructor(session) {
        this.backoffOptions = new apis_1.RetryOptions().options;
        this._basePath = defaultBasePath;
        this._defaultHeaders = {
            revision: "2023-09-15",
            "User-Agent": "klaviyo-api-node/6.0.1"
        };
        this._useQuerystring = false;
        this.session = session;
    }
    set useQuerystring(value) {
        this._useQuerystring = value;
    }
    set basePath(basePath) {
        this._basePath = basePath;
    }
    set defaultHeaders(defaultHeaders) {
        this._defaultHeaders = defaultHeaders;
    }
    get defaultHeaders() {
        return this._defaultHeaders;
    }
    get basePath() {
        return this._basePath;
    }
    createProfile(profileCreateQuery) {
        return __awaiter(this, void 0, void 0, function* () {
            const localVarPath = this.basePath + '/api/profiles/';
            let localVarQueryParameters = {};
            let localVarHeaderParams = Object.assign({}, this._defaultHeaders);
            const produces = ['application/json'];
            if (produces.indexOf('application/json') >= 0) {
                localVarHeaderParams.Accept = 'application/json';
            }
            else {
                localVarHeaderParams.Accept = produces.join(',');
            }
            if (profileCreateQuery === null || profileCreateQuery === undefined) {
                throw new Error('Required parameter profileCreateQuery was null or undefined when calling createProfile.');
            }
            (0, apis_1.queryParamPreProcessor)(localVarQueryParameters);
            let config = {
                method: 'POST',
                url: localVarPath,
                headers: localVarHeaderParams,
                params: localVarQueryParameters,
                data: models_1.ObjectSerializer.serialize(profileCreateQuery, "ProfileCreateQuery")
            };
            this.session.applyToRequest(config);
            return (0, exponential_backoff_1.backOff)(() => {
                return new Promise((resolve, reject) => {
                    axios(config)
                        .then(axiosResponse => {
                        let body;
                        body = models_1.ObjectSerializer.deserialize(axiosResponse.data, "PostProfileResponse");
                        resolve({ response: axiosResponse, body: body });
                    })
                        .catch(error => {
                        reject(error);
                    });
                });
            }, this.session.getRetryOptions());
        });
    }
    createPushToken(pushTokenCreateQuery) {
        return __awaiter(this, void 0, void 0, function* () {
            const localVarPath = this.basePath + '/api/push-tokens/';
            let localVarQueryParameters = {};
            let localVarHeaderParams = Object.assign({}, this._defaultHeaders);
            const produces = ['application/json'];
            if (produces.indexOf('application/json') >= 0) {
                localVarHeaderParams.Accept = 'application/json';
            }
            else {
                localVarHeaderParams.Accept = produces.join(',');
            }
            if (pushTokenCreateQuery === null || pushTokenCreateQuery === undefined) {
                throw new Error('Required parameter pushTokenCreateQuery was null or undefined when calling createPushToken.');
            }
            (0, apis_1.queryParamPreProcessor)(localVarQueryParameters);
            let config = {
                method: 'POST',
                url: localVarPath,
                headers: localVarHeaderParams,
                params: localVarQueryParameters,
                data: models_1.ObjectSerializer.serialize(pushTokenCreateQuery, "PushTokenCreateQuery")
            };
            this.session.applyToRequest(config);
            return (0, exponential_backoff_1.backOff)(() => {
                return new Promise((resolve, reject) => {
                    axios(config)
                        .then(axiosResponse => {
                        let body;
                        resolve({ response: axiosResponse, body: body });
                    })
                        .catch(error => {
                        reject(error);
                    });
                });
            }, this.session.getRetryOptions());
        });
    }
    getProfile(id, options = {}) {
        return __awaiter(this, void 0, void 0, function* () {
            const localVarPath = this.basePath + '/api/profiles/{id}/'
                .replace('{' + 'id' + '}', encodeURIComponent(String(id)));
            let localVarQueryParameters = {};
            let localVarHeaderParams = Object.assign({}, this._defaultHeaders);
            const produces = ['application/json'];
            if (produces.indexOf('application/json') >= 0) {
                localVarHeaderParams.Accept = 'application/json';
            }
            else {
                localVarHeaderParams.Accept = produces.join(',');
            }
            if (id === null || id === undefined) {
                throw new Error('Required parameter id was null or undefined when calling getProfile.');
            }
            if (options.additionalFieldsProfile !== undefined) {
                localVarQueryParameters['additional-fields[profile]'] = models_1.ObjectSerializer.serialize(options.additionalFieldsProfile, "Array<'predictive_analytics'>");
            }
            if (options.fieldsList !== undefined) {
                localVarQueryParameters['fields[list]'] = models_1.ObjectSerializer.serialize(options.fieldsList, "Array<'name' | 'created' | 'updated'>");
            }
            if (options.fieldsProfile !== undefined) {
                localVarQueryParameters['fields[profile]'] = models_1.ObjectSerializer.serialize(options.fieldsProfile, "Array<'email' | 'phone_number' | 'external_id' | 'first_name' | 'last_name' | 'organization' | 'title' | 'image' | 'created' | 'updated' | 'last_event_date' | 'location' | 'location.address1' | 'location.address2' | 'location.city' | 'location.country' | 'location.latitude' | 'location.longitude' | 'location.region' | 'location.zip' | 'location.timezone' | 'properties' | 'subscriptions' | 'subscriptions.email' | 'subscriptions.email.marketing' | 'subscriptions.email.marketing.consent' | 'subscriptions.email.marketing.timestamp' | 'subscriptions.email.marketing.method' | 'subscriptions.email.marketing.method_detail' | 'subscriptions.email.marketing.custom_method_detail' | 'subscriptions.email.marketing.double_optin' | 'subscriptions.email.marketing.suppressions' | 'subscriptions.email.marketing.list_suppressions' | 'subscriptions.sms' | 'subscriptions.sms.marketing' | 'subscriptions.sms.marketing.consent' | 'subscriptions.sms.marketing.timestamp' | 'subscriptions.sms.marketing.method' | 'subscriptions.sms.marketing.method_detail' | 'predictive_analytics' | 'predictive_analytics.historic_clv' | 'predictive_analytics.predicted_clv' | 'predictive_analytics.total_clv' | 'predictive_analytics.historic_number_of_orders' | 'predictive_analytics.predicted_number_of_orders' | 'predictive_analytics.average_days_between_orders' | 'predictive_analytics.average_order_value' | 'predictive_analytics.churn_probability' | 'predictive_analytics.expected_date_of_next_order'>");
            }
            if (options.fieldsSegment !== undefined) {
                localVarQueryParameters['fields[segment]'] = models_1.ObjectSerializer.serialize(options.fieldsSegment, "Array<'name' | 'created' | 'updated'>");
            }
            if (options.include !== undefined) {
                localVarQueryParameters['include'] = models_1.ObjectSerializer.serialize(options.include, "Array<'lists' | 'segments'>");
            }
            (0, apis_1.queryParamPreProcessor)(localVarQueryParameters);
            let config = {
                method: 'GET',
                url: localVarPath,
                headers: localVarHeaderParams,
                params: localVarQueryParameters,
            };
            this.session.applyToRequest(config);
            return (0, exponential_backoff_1.backOff)(() => {
                return new Promise((resolve, reject) => {
                    axios(config)
                        .then(axiosResponse => {
                        let body;
                        body = models_1.ObjectSerializer.deserialize(axiosResponse.data, "GetProfileResponseCompoundDocument");
                        resolve({ response: axiosResponse, body: body });
                    })
                        .catch(error => {
                        reject(error);
                    });
                });
            }, this.session.getRetryOptions());
        });
    }
    getProfileLists(id, options = {}) {
        return __awaiter(this, void 0, void 0, function* () {
            const localVarPath = this.basePath + '/api/profiles/{id}/lists/'
                .replace('{' + 'id' + '}', encodeURIComponent(String(id)));
            let localVarQueryParameters = {};
            let localVarHeaderParams = Object.assign({}, this._defaultHeaders);
            const produces = ['application/json'];
            if (produces.indexOf('application/json') >= 0) {
                localVarHeaderParams.Accept = 'application/json';
            }
            else {
                localVarHeaderParams.Accept = produces.join(',');
            }
            if (id === null || id === undefined) {
                throw new Error('Required parameter id was null or undefined when calling getProfileLists.');
            }
            if (options.fieldsList !== undefined) {
                localVarQueryParameters['fields[list]'] = models_1.ObjectSerializer.serialize(options.fieldsList, "Array<'name' | 'created' | 'updated'>");
            }
            (0, apis_1.queryParamPreProcessor)(localVarQueryParameters);
            let config = {
                method: 'GET',
                url: localVarPath,
                headers: localVarHeaderParams,
                params: localVarQueryParameters,
            };
            this.session.applyToRequest(config);
            return (0, exponential_backoff_1.backOff)(() => {
                return new Promise((resolve, reject) => {
                    axios(config)
                        .then(axiosResponse => {
                        let body;
                        body = models_1.ObjectSerializer.deserialize(axiosResponse.data, "GetListResponseCollection");
                        resolve({ response: axiosResponse, body: body });
                    })
                        .catch(error => {
                        reject(error);
                    });
                });
            }, this.session.getRetryOptions());
        });
    }
    getProfileRelationshipsLists(id) {
        return __awaiter(this, void 0, void 0, function* () {
            const localVarPath = this.basePath + '/api/profiles/{id}/relationships/lists/'
                .replace('{' + 'id' + '}', encodeURIComponent(String(id)));
            let localVarQueryParameters = {};
            let localVarHeaderParams = Object.assign({}, this._defaultHeaders);
            const produces = ['application/json'];
            if (produces.indexOf('application/json') >= 0) {
                localVarHeaderParams.Accept = 'application/json';
            }
            else {
                localVarHeaderParams.Accept = produces.join(',');
            }
            if (id === null || id === undefined) {
                throw new Error('Required parameter id was null or undefined when calling getProfileRelationshipsLists.');
            }
            (0, apis_1.queryParamPreProcessor)(localVarQueryParameters);
            let config = {
                method: 'GET',
                url: localVarPath,
                headers: localVarHeaderParams,
                params: localVarQueryParameters,
            };
            this.session.applyToRequest(config);
            return (0, exponential_backoff_1.backOff)(() => {
                return new Promise((resolve, reject) => {
                    axios(config)
                        .then(axiosResponse => {
                        let body;
                        body = models_1.ObjectSerializer.deserialize(axiosResponse.data, "GetProfileListRelationshipsResponseCollection");
                        resolve({ response: axiosResponse, body: body });
                    })
                        .catch(error => {
                        reject(error);
                    });
                });
            }, this.session.getRetryOptions());
        });
    }
    getProfileRelationshipsSegments(id) {
        return __awaiter(this, void 0, void 0, function* () {
            const localVarPath = this.basePath + '/api/profiles/{id}/relationships/segments/'
                .replace('{' + 'id' + '}', encodeURIComponent(String(id)));
            let localVarQueryParameters = {};
            let localVarHeaderParams = Object.assign({}, this._defaultHeaders);
            const produces = ['application/json'];
            if (produces.indexOf('application/json') >= 0) {
                localVarHeaderParams.Accept = 'application/json';
            }
            else {
                localVarHeaderParams.Accept = produces.join(',');
            }
            if (id === null || id === undefined) {
                throw new Error('Required parameter id was null or undefined when calling getProfileRelationshipsSegments.');
            }
            (0, apis_1.queryParamPreProcessor)(localVarQueryParameters);
            let config = {
                method: 'GET',
                url: localVarPath,
                headers: localVarHeaderParams,
                params: localVarQueryParameters,
            };
            this.session.applyToRequest(config);
            return (0, exponential_backoff_1.backOff)(() => {
                return new Promise((resolve, reject) => {
                    axios(config)
                        .then(axiosResponse => {
                        let body;
                        body = models_1.ObjectSerializer.deserialize(axiosResponse.data, "GetProfileSegmentRelationshipsResponseCollection");
                        resolve({ response: axiosResponse, body: body });
                    })
                        .catch(error => {
                        reject(error);
                    });
                });
            }, this.session.getRetryOptions());
        });
    }
    getProfileSegments(id, options = {}) {
        return __awaiter(this, void 0, void 0, function* () {
            const localVarPath = this.basePath + '/api/profiles/{id}/segments/'
                .replace('{' + 'id' + '}', encodeURIComponent(String(id)));
            let localVarQueryParameters = {};
            let localVarHeaderParams = Object.assign({}, this._defaultHeaders);
            const produces = ['application/json'];
            if (produces.indexOf('application/json') >= 0) {
                localVarHeaderParams.Accept = 'application/json';
            }
            else {
                localVarHeaderParams.Accept = produces.join(',');
            }
            if (id === null || id === undefined) {
                throw new Error('Required parameter id was null or undefined when calling getProfileSegments.');
            }
            if (options.fieldsSegment !== undefined) {
                localVarQueryParameters['fields[segment]'] = models_1.ObjectSerializer.serialize(options.fieldsSegment, "Array<'name' | 'created' | 'updated'>");
            }
            (0, apis_1.queryParamPreProcessor)(localVarQueryParameters);
            let config = {
                method: 'GET',
                url: localVarPath,
                headers: localVarHeaderParams,
                params: localVarQueryParameters,
            };
            this.session.applyToRequest(config);
            return (0, exponential_backoff_1.backOff)(() => {
                return new Promise((resolve, reject) => {
                    axios(config)
                        .then(axiosResponse => {
                        let body;
                        body = models_1.ObjectSerializer.deserialize(axiosResponse.data, "GetSegmentResponseCollection");
                        resolve({ response: axiosResponse, body: body });
                    })
                        .catch(error => {
                        reject(error);
                    });
                });
            }, this.session.getRetryOptions());
        });
    }
    getProfiles(options = {}) {
        return __awaiter(this, void 0, void 0, function* () {
            const localVarPath = this.basePath + '/api/profiles/';
            let localVarQueryParameters = {};
            let localVarHeaderParams = Object.assign({}, this._defaultHeaders);
            const produces = ['application/json'];
            if (produces.indexOf('application/json') >= 0) {
                localVarHeaderParams.Accept = 'application/json';
            }
            else {
                localVarHeaderParams.Accept = produces.join(',');
            }
            if (options.additionalFieldsProfile !== undefined) {
                localVarQueryParameters['additional-fields[profile]'] = models_1.ObjectSerializer.serialize(options.additionalFieldsProfile, "Array<'predictive_analytics'>");
            }
            if (options.fieldsProfile !== undefined) {
                localVarQueryParameters['fields[profile]'] = models_1.ObjectSerializer.serialize(options.fieldsProfile, "Array<'email' | 'phone_number' | 'external_id' | 'first_name' | 'last_name' | 'organization' | 'title' | 'image' | 'created' | 'updated' | 'last_event_date' | 'location' | 'location.address1' | 'location.address2' | 'location.city' | 'location.country' | 'location.latitude' | 'location.longitude' | 'location.region' | 'location.zip' | 'location.timezone' | 'properties' | 'subscriptions' | 'subscriptions.email' | 'subscriptions.email.marketing' | 'subscriptions.email.marketing.consent' | 'subscriptions.email.marketing.timestamp' | 'subscriptions.email.marketing.method' | 'subscriptions.email.marketing.method_detail' | 'subscriptions.email.marketing.custom_method_detail' | 'subscriptions.email.marketing.double_optin' | 'subscriptions.email.marketing.suppressions' | 'subscriptions.email.marketing.list_suppressions' | 'subscriptions.sms' | 'subscriptions.sms.marketing' | 'subscriptions.sms.marketing.consent' | 'subscriptions.sms.marketing.timestamp' | 'subscriptions.sms.marketing.method' | 'subscriptions.sms.marketing.method_detail' | 'predictive_analytics' | 'predictive_analytics.historic_clv' | 'predictive_analytics.predicted_clv' | 'predictive_analytics.total_clv' | 'predictive_analytics.historic_number_of_orders' | 'predictive_analytics.predicted_number_of_orders' | 'predictive_analytics.average_days_between_orders' | 'predictive_analytics.average_order_value' | 'predictive_analytics.churn_probability' | 'predictive_analytics.expected_date_of_next_order'>");
            }
            if (options.filter !== undefined) {
                localVarQueryParameters['filter'] = models_1.ObjectSerializer.serialize(options.filter, "string");
            }
            if (options.pageCursor !== undefined) {
                localVarQueryParameters['page[cursor]'] = models_1.ObjectSerializer.serialize(options.pageCursor, "string");
            }
            if (options.pageSize !== undefined) {
                localVarQueryParameters['page[size]'] = models_1.ObjectSerializer.serialize(options.pageSize, "number");
            }
            if (options.sort !== undefined) {
                localVarQueryParameters['sort'] = models_1.ObjectSerializer.serialize(options.sort, "'created' | '-created' | 'email' | '-email' | 'id' | '-id' | 'updated' | '-updated'");
            }
            (0, apis_1.queryParamPreProcessor)(localVarQueryParameters);
            let config = {
                method: 'GET',
                url: localVarPath,
                headers: localVarHeaderParams,
                params: localVarQueryParameters,
            };
            this.session.applyToRequest(config);
            return (0, exponential_backoff_1.backOff)(() => {
                return new Promise((resolve, reject) => {
                    axios(config)
                        .then(axiosResponse => {
                        let body;
                        body = models_1.ObjectSerializer.deserialize(axiosResponse.data, "GetProfileResponseCollectionCompoundDocument");
                        resolve({ response: axiosResponse, body: body });
                    })
                        .catch(error => {
                        reject(error);
                    });
                });
            }, this.session.getRetryOptions());
        });
    }
    mergeProfiles(profileMergeQuery) {
        return __awaiter(this, void 0, void 0, function* () {
            const localVarPath = this.basePath + '/api/profile-merge/';
            let localVarQueryParameters = {};
            let localVarHeaderParams = Object.assign({}, this._defaultHeaders);
            const produces = ['application/json'];
            if (produces.indexOf('application/json') >= 0) {
                localVarHeaderParams.Accept = 'application/json';
            }
            else {
                localVarHeaderParams.Accept = produces.join(',');
            }
            if (profileMergeQuery === null || profileMergeQuery === undefined) {
                throw new Error('Required parameter profileMergeQuery was null or undefined when calling mergeProfiles.');
            }
            (0, apis_1.queryParamPreProcessor)(localVarQueryParameters);
            let config = {
                method: 'POST',
                url: localVarPath,
                headers: localVarHeaderParams,
                params: localVarQueryParameters,
                data: models_1.ObjectSerializer.serialize(profileMergeQuery, "ProfileMergeQuery")
            };
            this.session.applyToRequest(config);
            return (0, exponential_backoff_1.backOff)(() => {
                return new Promise((resolve, reject) => {
                    axios(config)
                        .then(axiosResponse => {
                        let body;
                        body = models_1.ObjectSerializer.deserialize(axiosResponse.data, "PostProfileMergeResponse");
                        resolve({ response: axiosResponse, body: body });
                    })
                        .catch(error => {
                        reject(error);
                    });
                });
            }, this.session.getRetryOptions());
        });
    }
    subscribeProfiles(subscriptionCreateJobCreateQuery) {
        return __awaiter(this, void 0, void 0, function* () {
            const localVarPath = this.basePath + '/api/profile-subscription-bulk-create-jobs/';
            let localVarQueryParameters = {};
            let localVarHeaderParams = Object.assign({}, this._defaultHeaders);
            const produces = ['application/json'];
            if (produces.indexOf('application/json') >= 0) {
                localVarHeaderParams.Accept = 'application/json';
            }
            else {
                localVarHeaderParams.Accept = produces.join(',');
            }
            if (subscriptionCreateJobCreateQuery === null || subscriptionCreateJobCreateQuery === undefined) {
                throw new Error('Required parameter subscriptionCreateJobCreateQuery was null or undefined when calling subscribeProfiles.');
            }
            (0, apis_1.queryParamPreProcessor)(localVarQueryParameters);
            let config = {
                method: 'POST',
                url: localVarPath,
                headers: localVarHeaderParams,
                params: localVarQueryParameters,
                data: models_1.ObjectSerializer.serialize(subscriptionCreateJobCreateQuery, "SubscriptionCreateJobCreateQuery")
            };
            this.session.applyToRequest(config);
            return (0, exponential_backoff_1.backOff)(() => {
                return new Promise((resolve, reject) => {
                    axios(config)
                        .then(axiosResponse => {
                        let body;
                        resolve({ response: axiosResponse, body: body });
                    })
                        .catch(error => {
                        reject(error);
                    });
                });
            }, this.session.getRetryOptions());
        });
    }
    suppressProfiles(suppressionCreateJobCreateQuery) {
        return __awaiter(this, void 0, void 0, function* () {
            const localVarPath = this.basePath + '/api/profile-suppression-bulk-create-jobs/';
            let localVarQueryParameters = {};
            let localVarHeaderParams = Object.assign({}, this._defaultHeaders);
            const produces = ['application/json'];
            if (produces.indexOf('application/json') >= 0) {
                localVarHeaderParams.Accept = 'application/json';
            }
            else {
                localVarHeaderParams.Accept = produces.join(',');
            }
            if (suppressionCreateJobCreateQuery === null || suppressionCreateJobCreateQuery === undefined) {
                throw new Error('Required parameter suppressionCreateJobCreateQuery was null or undefined when calling suppressProfiles.');
            }
            (0, apis_1.queryParamPreProcessor)(localVarQueryParameters);
            let config = {
                method: 'POST',
                url: localVarPath,
                headers: localVarHeaderParams,
                params: localVarQueryParameters,
                data: models_1.ObjectSerializer.serialize(suppressionCreateJobCreateQuery, "SuppressionCreateJobCreateQuery")
            };
            this.session.applyToRequest(config);
            return (0, exponential_backoff_1.backOff)(() => {
                return new Promise((resolve, reject) => {
                    axios(config)
                        .then(axiosResponse => {
                        let body;
                        resolve({ response: axiosResponse, body: body });
                    })
                        .catch(error => {
                        reject(error);
                    });
                });
            }, this.session.getRetryOptions());
        });
    }
    unsubscribeProfiles(subscriptionDeleteJobCreateQuery) {
        return __awaiter(this, void 0, void 0, function* () {
            const localVarPath = this.basePath + '/api/profile-subscription-bulk-delete-jobs/';
            let localVarQueryParameters = {};
            let localVarHeaderParams = Object.assign({}, this._defaultHeaders);
            const produces = ['application/json'];
            if (produces.indexOf('application/json') >= 0) {
                localVarHeaderParams.Accept = 'application/json';
            }
            else {
                localVarHeaderParams.Accept = produces.join(',');
            }
            if (subscriptionDeleteJobCreateQuery === null || subscriptionDeleteJobCreateQuery === undefined) {
                throw new Error('Required parameter subscriptionDeleteJobCreateQuery was null or undefined when calling unsubscribeProfiles.');
            }
            (0, apis_1.queryParamPreProcessor)(localVarQueryParameters);
            let config = {
                method: 'POST',
                url: localVarPath,
                headers: localVarHeaderParams,
                params: localVarQueryParameters,
                data: models_1.ObjectSerializer.serialize(subscriptionDeleteJobCreateQuery, "SubscriptionDeleteJobCreateQuery")
            };
            this.session.applyToRequest(config);
            return (0, exponential_backoff_1.backOff)(() => {
                return new Promise((resolve, reject) => {
                    axios(config)
                        .then(axiosResponse => {
                        let body;
                        resolve({ response: axiosResponse, body: body });
                    })
                        .catch(error => {
                        reject(error);
                    });
                });
            }, this.session.getRetryOptions());
        });
    }
    unsuppressProfiles(suppressionDeleteJobCreateQuery) {
        return __awaiter(this, void 0, void 0, function* () {
            const localVarPath = this.basePath + '/api/profile-suppression-bulk-delete-jobs/';
            let localVarQueryParameters = {};
            let localVarHeaderParams = Object.assign({}, this._defaultHeaders);
            const produces = ['application/json'];
            if (produces.indexOf('application/json') >= 0) {
                localVarHeaderParams.Accept = 'application/json';
            }
            else {
                localVarHeaderParams.Accept = produces.join(',');
            }
            if (suppressionDeleteJobCreateQuery === null || suppressionDeleteJobCreateQuery === undefined) {
                throw new Error('Required parameter suppressionDeleteJobCreateQuery was null or undefined when calling unsuppressProfiles.');
            }
            (0, apis_1.queryParamPreProcessor)(localVarQueryParameters);
            let config = {
                method: 'POST',
                url: localVarPath,
                headers: localVarHeaderParams,
                params: localVarQueryParameters,
                data: models_1.ObjectSerializer.serialize(suppressionDeleteJobCreateQuery, "SuppressionDeleteJobCreateQuery")
            };
            this.session.applyToRequest(config);
            return (0, exponential_backoff_1.backOff)(() => {
                return new Promise((resolve, reject) => {
                    axios(config)
                        .then(axiosResponse => {
                        let body;
                        resolve({ response: axiosResponse, body: body });
                    })
                        .catch(error => {
                        reject(error);
                    });
                });
            }, this.session.getRetryOptions());
        });
    }
    updateProfile(id, profilePartialUpdateQuery) {
        return __awaiter(this, void 0, void 0, function* () {
            const localVarPath = this.basePath + '/api/profiles/{id}/'
                .replace('{' + 'id' + '}', encodeURIComponent(String(id)));
            let localVarQueryParameters = {};
            let localVarHeaderParams = Object.assign({}, this._defaultHeaders);
            const produces = ['application/json'];
            if (produces.indexOf('application/json') >= 0) {
                localVarHeaderParams.Accept = 'application/json';
            }
            else {
                localVarHeaderParams.Accept = produces.join(',');
            }
            if (id === null || id === undefined) {
                throw new Error('Required parameter id was null or undefined when calling updateProfile.');
            }
            if (profilePartialUpdateQuery === null || profilePartialUpdateQuery === undefined) {
                throw new Error('Required parameter profilePartialUpdateQuery was null or undefined when calling updateProfile.');
            }
            (0, apis_1.queryParamPreProcessor)(localVarQueryParameters);
            let config = {
                method: 'PATCH',
                url: localVarPath,
                headers: localVarHeaderParams,
                params: localVarQueryParameters,
                data: models_1.ObjectSerializer.serialize(profilePartialUpdateQuery, "ProfilePartialUpdateQuery")
            };
            this.session.applyToRequest(config);
            return (0, exponential_backoff_1.backOff)(() => {
                return new Promise((resolve, reject) => {
                    axios(config)
                        .then(axiosResponse => {
                        let body;
                        body = models_1.ObjectSerializer.deserialize(axiosResponse.data, "PatchProfileResponse");
                        resolve({ response: axiosResponse, body: body });
                    })
                        .catch(error => {
                        reject(error);
                    });
                });
            }, this.session.getRetryOptions());
        });
    }
}
exports.ProfilesApi = ProfilesApi;
//# sourceMappingURL=profilesApi.js.map