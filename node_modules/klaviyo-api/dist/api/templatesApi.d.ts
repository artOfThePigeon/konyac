import { AxiosResponse } from "axios";
import { BackoffOptions } from 'exponential-backoff';
import { GetTemplateResponse } from '../model/getTemplateResponse';
import { GetTemplateResponseCollection } from '../model/getTemplateResponseCollection';
import { PatchTemplateResponse } from '../model/patchTemplateResponse';
import { PostTemplateResponse } from '../model/postTemplateResponse';
import { TemplateCloneQuery } from '../model/templateCloneQuery';
import { TemplateCreateQuery } from '../model/templateCreateQuery';
import { TemplateRenderQuery } from '../model/templateRenderQuery';
import { TemplateUpdateQuery } from '../model/templateUpdateQuery';
import { Session } from './apis';
export declare class TemplatesApi {
    protected backoffOptions: BackoffOptions;
    session: Session;
    protected _basePath: string;
    protected _defaultHeaders: any;
    protected _useQuerystring: boolean;
    constructor(session: Session);
    set useQuerystring(value: boolean);
    set basePath(basePath: string);
    set defaultHeaders(defaultHeaders: any);
    get defaultHeaders(): any;
    get basePath(): string;
    createTemplate(templateCreateQuery: TemplateCreateQuery): Promise<{
        response: AxiosResponse;
        body: PostTemplateResponse;
    }>;
    createTemplateClone(templateCloneQuery: TemplateCloneQuery): Promise<{
        response: AxiosResponse;
        body: PostTemplateResponse;
    }>;
    createTemplateRender(templateRenderQuery: TemplateRenderQuery): Promise<{
        response: AxiosResponse;
        body: PostTemplateResponse;
    }>;
    deleteTemplate(id: string): Promise<{
        response: AxiosResponse;
        body?: any;
    }>;
    getTemplate(id: string, options?: {
        fieldsTemplate?: Array<'name' | 'editor_type' | 'html' | 'text' | 'created' | 'updated'>;
    }): Promise<{
        response: AxiosResponse;
        body: GetTemplateResponse;
    }>;
    getTemplates(options?: {
        fieldsTemplate?: Array<'name' | 'editor_type' | 'html' | 'text' | 'created' | 'updated'>;
        filter?: string;
        pageCursor?: string;
        sort?: 'created' | '-created' | 'id' | '-id' | 'name' | '-name' | 'updated' | '-updated';
    }): Promise<{
        response: AxiosResponse;
        body: GetTemplateResponseCollection;
    }>;
    updateTemplate(id: string, templateUpdateQuery: TemplateUpdateQuery): Promise<{
        response: AxiosResponse;
        body: PatchTemplateResponse;
    }>;
}
