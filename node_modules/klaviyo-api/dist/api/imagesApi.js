"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.ImagesApi = void 0;
const axios = require('axios');
const exponential_backoff_1 = require("exponential-backoff");
const form_data_1 = __importDefault(require("form-data"));
const models_1 = require("../model/models");
const apis_1 = require("./apis");
let defaultBasePath = 'https://a.klaviyo.com';
class ImagesApi {
    constructor(session) {
        this.backoffOptions = new apis_1.RetryOptions().options;
        this._basePath = defaultBasePath;
        this._defaultHeaders = {
            revision: "2023-09-15",
            "User-Agent": "klaviyo-api-node/6.0.1"
        };
        this._useQuerystring = false;
        this.session = session;
    }
    set useQuerystring(value) {
        this._useQuerystring = value;
    }
    set basePath(basePath) {
        this._basePath = basePath;
    }
    set defaultHeaders(defaultHeaders) {
        this._defaultHeaders = defaultHeaders;
    }
    get defaultHeaders() {
        return this._defaultHeaders;
    }
    get basePath() {
        return this._basePath;
    }
    getImage(id, options = {}) {
        return __awaiter(this, void 0, void 0, function* () {
            const localVarPath = this.basePath + '/api/images/{id}/'
                .replace('{' + 'id' + '}', encodeURIComponent(String(id)));
            let localVarQueryParameters = {};
            let localVarHeaderParams = Object.assign({}, this._defaultHeaders);
            const produces = ['application/json'];
            if (produces.indexOf('application/json') >= 0) {
                localVarHeaderParams.Accept = 'application/json';
            }
            else {
                localVarHeaderParams.Accept = produces.join(',');
            }
            if (id === null || id === undefined) {
                throw new Error('Required parameter id was null or undefined when calling getImage.');
            }
            if (options.fieldsImage !== undefined) {
                localVarQueryParameters['fields[image]'] = models_1.ObjectSerializer.serialize(options.fieldsImage, "Array<'name' | 'image_url' | 'format' | 'size' | 'hidden' | 'updated_at'>");
            }
            (0, apis_1.queryParamPreProcessor)(localVarQueryParameters);
            let config = {
                method: 'GET',
                url: localVarPath,
                headers: localVarHeaderParams,
                params: localVarQueryParameters,
            };
            this.session.applyToRequest(config);
            return (0, exponential_backoff_1.backOff)(() => {
                return new Promise((resolve, reject) => {
                    axios(config)
                        .then(axiosResponse => {
                        let body;
                        body = models_1.ObjectSerializer.deserialize(axiosResponse.data, "GetImageResponse");
                        resolve({ response: axiosResponse, body: body });
                    })
                        .catch(error => {
                        reject(error);
                    });
                });
            }, this.session.getRetryOptions());
        });
    }
    getImages(options = {}) {
        return __awaiter(this, void 0, void 0, function* () {
            const localVarPath = this.basePath + '/api/images/';
            let localVarQueryParameters = {};
            let localVarHeaderParams = Object.assign({}, this._defaultHeaders);
            const produces = ['application/json'];
            if (produces.indexOf('application/json') >= 0) {
                localVarHeaderParams.Accept = 'application/json';
            }
            else {
                localVarHeaderParams.Accept = produces.join(',');
            }
            if (options.fieldsImage !== undefined) {
                localVarQueryParameters['fields[image]'] = models_1.ObjectSerializer.serialize(options.fieldsImage, "Array<'name' | 'image_url' | 'format' | 'size' | 'hidden' | 'updated_at'>");
            }
            if (options.filter !== undefined) {
                localVarQueryParameters['filter'] = models_1.ObjectSerializer.serialize(options.filter, "string");
            }
            if (options.pageCursor !== undefined) {
                localVarQueryParameters['page[cursor]'] = models_1.ObjectSerializer.serialize(options.pageCursor, "string");
            }
            if (options.pageSize !== undefined) {
                localVarQueryParameters['page[size]'] = models_1.ObjectSerializer.serialize(options.pageSize, "number");
            }
            if (options.sort !== undefined) {
                localVarQueryParameters['sort'] = models_1.ObjectSerializer.serialize(options.sort, "'format' | '-format' | 'id' | '-id' | 'name' | '-name' | 'size' | '-size' | 'updated_at' | '-updated_at'");
            }
            (0, apis_1.queryParamPreProcessor)(localVarQueryParameters);
            let config = {
                method: 'GET',
                url: localVarPath,
                headers: localVarHeaderParams,
                params: localVarQueryParameters,
            };
            this.session.applyToRequest(config);
            return (0, exponential_backoff_1.backOff)(() => {
                return new Promise((resolve, reject) => {
                    axios(config)
                        .then(axiosResponse => {
                        let body;
                        body = models_1.ObjectSerializer.deserialize(axiosResponse.data, "GetImageResponseCollection");
                        resolve({ response: axiosResponse, body: body });
                    })
                        .catch(error => {
                        reject(error);
                    });
                });
            }, this.session.getRetryOptions());
        });
    }
    updateImage(id, imagePartialUpdateQuery) {
        return __awaiter(this, void 0, void 0, function* () {
            const localVarPath = this.basePath + '/api/images/{id}/'
                .replace('{' + 'id' + '}', encodeURIComponent(String(id)));
            let localVarQueryParameters = {};
            let localVarHeaderParams = Object.assign({}, this._defaultHeaders);
            const produces = ['application/json'];
            if (produces.indexOf('application/json') >= 0) {
                localVarHeaderParams.Accept = 'application/json';
            }
            else {
                localVarHeaderParams.Accept = produces.join(',');
            }
            if (id === null || id === undefined) {
                throw new Error('Required parameter id was null or undefined when calling updateImage.');
            }
            if (imagePartialUpdateQuery === null || imagePartialUpdateQuery === undefined) {
                throw new Error('Required parameter imagePartialUpdateQuery was null or undefined when calling updateImage.');
            }
            (0, apis_1.queryParamPreProcessor)(localVarQueryParameters);
            let config = {
                method: 'PATCH',
                url: localVarPath,
                headers: localVarHeaderParams,
                params: localVarQueryParameters,
                data: models_1.ObjectSerializer.serialize(imagePartialUpdateQuery, "ImagePartialUpdateQuery")
            };
            this.session.applyToRequest(config);
            return (0, exponential_backoff_1.backOff)(() => {
                return new Promise((resolve, reject) => {
                    axios(config)
                        .then(axiosResponse => {
                        let body;
                        body = models_1.ObjectSerializer.deserialize(axiosResponse.data, "PatchImageResponse");
                        resolve({ response: axiosResponse, body: body });
                    })
                        .catch(error => {
                        reject(error);
                    });
                });
            }, this.session.getRetryOptions());
        });
    }
    uploadImageFromFile(file, name, hidden) {
        return __awaiter(this, void 0, void 0, function* () {
            const localVarPath = this.basePath + '/api/image-upload/';
            let localVarQueryParameters = {};
            let localVarHeaderParams = Object.assign({}, this._defaultHeaders);
            const produces = ['application/json'];
            if (produces.indexOf('application/json') >= 0) {
                localVarHeaderParams.Accept = 'application/json';
            }
            else {
                localVarHeaderParams.Accept = produces.join(',');
            }
            const form = new form_data_1.default();
            if (file === null || file === undefined) {
                throw new Error('Required parameter file was null or undefined when calling uploadImageFromFile.');
            }
            if (file !== undefined) {
                form.append('file', file);
            }
            if (name !== undefined) {
                form.append('name', name.toString());
            }
            if (hidden !== undefined) {
                form.append('hidden', hidden.toString());
            }
            (0, apis_1.queryParamPreProcessor)(localVarQueryParameters);
            let config = {
                method: 'POST',
                url: localVarPath,
                headers: localVarHeaderParams,
                params: localVarQueryParameters,
                data: form,
            };
            this.session.applyToRequest(config);
            return (0, exponential_backoff_1.backOff)(() => {
                return new Promise((resolve, reject) => {
                    axios(config)
                        .then(axiosResponse => {
                        let body;
                        body = models_1.ObjectSerializer.deserialize(axiosResponse.data, "PostImageResponse");
                        resolve({ response: axiosResponse, body: body });
                    })
                        .catch(error => {
                        reject(error);
                    });
                });
            }, this.session.getRetryOptions());
        });
    }
    uploadImageFromUrl(imageCreateQuery) {
        return __awaiter(this, void 0, void 0, function* () {
            const localVarPath = this.basePath + '/api/images/';
            let localVarQueryParameters = {};
            let localVarHeaderParams = Object.assign({}, this._defaultHeaders);
            const produces = ['application/json'];
            if (produces.indexOf('application/json') >= 0) {
                localVarHeaderParams.Accept = 'application/json';
            }
            else {
                localVarHeaderParams.Accept = produces.join(',');
            }
            if (imageCreateQuery === null || imageCreateQuery === undefined) {
                throw new Error('Required parameter imageCreateQuery was null or undefined when calling uploadImageFromUrl.');
            }
            (0, apis_1.queryParamPreProcessor)(localVarQueryParameters);
            let config = {
                method: 'POST',
                url: localVarPath,
                headers: localVarHeaderParams,
                params: localVarQueryParameters,
                data: models_1.ObjectSerializer.serialize(imageCreateQuery, "ImageCreateQuery")
            };
            this.session.applyToRequest(config);
            return (0, exponential_backoff_1.backOff)(() => {
                return new Promise((resolve, reject) => {
                    axios(config)
                        .then(axiosResponse => {
                        let body;
                        body = models_1.ObjectSerializer.deserialize(axiosResponse.data, "PostImageResponse");
                        resolve({ response: axiosResponse, body: body });
                    })
                        .catch(error => {
                        reject(error);
                    });
                });
            }, this.session.getRetryOptions());
        });
    }
}
exports.ImagesApi = ImagesApi;
//# sourceMappingURL=imagesApi.js.map