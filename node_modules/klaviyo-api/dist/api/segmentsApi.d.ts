import { AxiosResponse } from "axios";
import { BackoffOptions } from 'exponential-backoff';
import { GetSegmentListResponseCollectionCompoundDocument } from '../model/getSegmentListResponseCollectionCompoundDocument';
import { GetSegmentMemberResponseCollection } from '../model/getSegmentMemberResponseCollection';
import { GetSegmentRelationshipsResponseCollection } from '../model/getSegmentRelationshipsResponseCollection';
import { GetSegmentRetrieveResponseCompoundDocument } from '../model/getSegmentRetrieveResponseCompoundDocument';
import { GetSegmentTagRelationshipListResponseCollection } from '../model/getSegmentTagRelationshipListResponseCollection';
import { GetTagResponseCollection } from '../model/getTagResponseCollection';
import { PatchSegmentPartialUpdateResponse } from '../model/patchSegmentPartialUpdateResponse';
import { SegmentPartialUpdateQuery } from '../model/segmentPartialUpdateQuery';
import { Session } from './apis';
export declare class SegmentsApi {
    protected backoffOptions: BackoffOptions;
    session: Session;
    protected _basePath: string;
    protected _defaultHeaders: any;
    protected _useQuerystring: boolean;
    constructor(session: Session);
    set useQuerystring(value: boolean);
    set basePath(basePath: string);
    set defaultHeaders(defaultHeaders: any);
    get defaultHeaders(): any;
    get basePath(): string;
    getSegment(id: string, options?: {
        additionalFieldsSegment?: Array<'profile_count'>;
        fieldsSegment?: Array<'name' | 'created' | 'updated' | 'profile_count'>;
        fieldsTag?: Array<'name'>;
        include?: Array<'tags'>;
    }): Promise<{
        response: AxiosResponse;
        body: GetSegmentRetrieveResponseCompoundDocument;
    }>;
    getSegmentProfiles(id: string, options?: {
        additionalFieldsProfile?: Array<'predictive_analytics'>;
        fieldsProfile?: Array<'email' | 'phone_number' | 'external_id' | 'first_name' | 'last_name' | 'organization' | 'title' | 'image' | 'created' | 'updated' | 'last_event_date' | 'location' | 'location.address1' | 'location.address2' | 'location.city' | 'location.country' | 'location.latitude' | 'location.longitude' | 'location.region' | 'location.zip' | 'location.timezone' | 'properties' | 'subscriptions' | 'subscriptions.email' | 'subscriptions.email.marketing' | 'subscriptions.email.marketing.consent' | 'subscriptions.email.marketing.timestamp' | 'subscriptions.email.marketing.method' | 'subscriptions.email.marketing.method_detail' | 'subscriptions.email.marketing.custom_method_detail' | 'subscriptions.email.marketing.double_optin' | 'subscriptions.email.marketing.suppressions' | 'subscriptions.email.marketing.list_suppressions' | 'subscriptions.sms' | 'subscriptions.sms.marketing' | 'subscriptions.sms.marketing.consent' | 'subscriptions.sms.marketing.timestamp' | 'subscriptions.sms.marketing.method' | 'subscriptions.sms.marketing.method_detail' | 'joined_group_at' | 'predictive_analytics' | 'predictive_analytics.historic_clv' | 'predictive_analytics.predicted_clv' | 'predictive_analytics.total_clv' | 'predictive_analytics.historic_number_of_orders' | 'predictive_analytics.predicted_number_of_orders' | 'predictive_analytics.average_days_between_orders' | 'predictive_analytics.average_order_value' | 'predictive_analytics.churn_probability' | 'predictive_analytics.expected_date_of_next_order'>;
        filter?: string;
        pageCursor?: string;
        pageSize?: number;
        sort?: 'joined_group_at' | '-joined_group_at';
    }): Promise<{
        response: AxiosResponse;
        body: GetSegmentMemberResponseCollection;
    }>;
    getSegmentRelationshipsProfiles(id: string, options?: {
        filter?: string;
        pageCursor?: string;
        pageSize?: number;
        sort?: 'joined_group_at' | '-joined_group_at';
    }): Promise<{
        response: AxiosResponse;
        body: GetSegmentRelationshipsResponseCollection;
    }>;
    getSegmentRelationshipsTags(id: string): Promise<{
        response: AxiosResponse;
        body: GetSegmentTagRelationshipListResponseCollection;
    }>;
    getSegmentTags(id: string, options?: {
        fieldsTag?: Array<'name'>;
    }): Promise<{
        response: AxiosResponse;
        body: GetTagResponseCollection;
    }>;
    getSegments(options?: {
        fieldsSegment?: Array<'name' | 'created' | 'updated'>;
        fieldsTag?: Array<'name'>;
        filter?: string;
        include?: Array<'tags'>;
        pageCursor?: string;
    }): Promise<{
        response: AxiosResponse;
        body: GetSegmentListResponseCollectionCompoundDocument;
    }>;
    updateSegment(id: string, segmentPartialUpdateQuery: SegmentPartialUpdateQuery): Promise<{
        response: AxiosResponse;
        body: PatchSegmentPartialUpdateResponse;
    }>;
}
